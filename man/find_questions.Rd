% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/questions.R
\name{find_questions}
\alias{find_questions}
\alias{get_questions}
\title{Extract question information from specific studies}
\usage{
find_questions(id_study, question_name, all_columns = FALSE)

get_questions(id_study, all_columns = FALSE)
}
\arguments{
\item{id_study}{a numeric value that specifies the desired study. Find with
\code{\link{find_studies}} or \code{\link{get_studies}}.}

\item{question_name}{A vector of strings specifying the variable names.
A search is performed for similar names from all variables in the study.
Upper or lower case is ignored and regular expressions are supported.}

\item{all_columns}{\code{TRUE} or \code{FALSE} stating whether to return all
columns. By default it returns the `id` of the question, the `study_id`, the
`short_name` of the question and the `country_iso` and `language_iso` of the
question. If set to \code{TRUE}, it returns additional columns with the
specific wording of the question, answer options, etc..}
}
\value{
a \code{\link[tibble]{tibble}}
}
\description{
Use find_question to search for information on a given question
in a study and get_questions to return all the question in a study.
}
\examples{
\dontrun{
# Set login information here. See ?sqp_login
sqp_login()

# 1 is ESS round 1
find_questions(1, "tvtot")

# If ran again, even with a different variable, it loads
# the data from memory, making it very fast

find_questions(1, "tvpol")


# If that doesn't fit, then use get_questions and search for the question
# manually through filtering:

library(dplyr)
get_questions(1) \%>\%
   filter(country_iso == "ES",
          language_iso == "spa",
          grepl("Tot", .$short_name))

# Can also search for several variables in one call

find_questions(1, c("tvpol", "tvtot"))

# Or use regular expressions. For example, to find all variables
# that begin with tv

find_questions(1, "^tv")
}

}
