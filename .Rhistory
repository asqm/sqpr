result <- purrr::map_dbl(combinations, function(index) {
index_one <- index[1]
index_two <- index[2]
result <- purrr::map2_dbl(index_one, index_two, cov_formula,
std_data, r_coef, method_e)
result
})
result
}
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_e
# This the multiplication of all variable combinations
# using ri * mi * mj * rj * si * sj
# It's better not to use this in isolation but call
# estimate_sscore as a whole.
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_e
combn_multiplication
# you need to calculate the product of a combination
# of the weights by the covariance of errors.
intm <- combn_multiplication(comb, wt, cov_e)
intm
# you need to calculate the product of a combination
# of the weights by the covariance of errors.
intm <- sum(combn_multiplication(comb, wt, cov_e)) * 2
intm
var_ecs <- weights_by_qcoef + intm
var_ecs
var_composite <- stats::var(rowSums(the_data, na.rm = TRUE))
var_composite
1 - (var_ecs / var_composite)
round(1 - (var_ecs / var_composite), 5)
round(1 - (var_ecs / var_composite), 6)
devtools::load_all()
library(testthat)
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
the_data <-  purrr::map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
summary(the_data)
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
score
expect_equal(score, 0.867985, tolerance = 0.01)
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::check()
devtools::document()
?mean
?lm
?lme4::lmer
?lme4::glmer
?kmeans
?svm
??svm
?e1071::svm
?stats::kmeans
?caret::plsda
?lda
?kmeans
devtools::test()
devtools::test()
prod
?prod
devtools::test()
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
sqp_data <- structure(list(question = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), quality = c(0.888361893312542,
0.67697429025685, 0.795403566232727, 0.703, 0.601, 0.657, 0.727,
1, 0.93), reliability = c(NA, NA, NA, 0.737, 0.624, 0.721, 0.797,
NA, NA), validity = c(NA, NA, NA, 0.954, 0.964, 0.911, 0.912,
NA, NA)), row.names = c(NA, -9L), class = c("tbl_df", "tbl",
"data.frame"), .Names = c("question", "quality", "reliability",
"validity"))
sqp_data
cmv_vars <- c("stflife", "stfeco")
sqp_data <- sqp_reconstruct(sqp_data)
if (is.matrix(x)) x <- tibble::as_tibble(x, rownames = "rowname")
sum_corr <- x[[1]] %in% cmv_vars
sum_sqp <- sqp_data[[1]] %in% cmv_vars
vars_corr <- cmv_vars %in% x[[1]]
vars_sqp <- cmv_vars %in% sqp_data[[1]]
if (sum(sum_corr) != length(cmv_vars)) {
stop("At least one variable not present in `x`: ",
paste0(cmv_vars[!vars_corr], collapse = ", "),
call. = FALSE)
}
if ((sum(sum_sqp) != length(cmv_vars))) {
stop("At least one variable not present in `sqp_data`: ",
paste0(cmv_vars[!vars_sqp], collapse = ", "),
call. = FALSE)
}
# If estimate_cmv ends up being exportable, then this needs
# to be moved inside estimate_cmv and find a way to pass
# cmv_vars to estimate_cmv
if (anyNA(sqp_data[sum_sqp, c("reliability", "validity")])) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(cmv_vars, collapse = ", "))
}
cmv <- estimate_cmv(sqp_data[sum_sqp, ])
cmv
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x[[1]]
x <- as.data.frame(x)
x
x %>% filter(rowname %in% c("stflife", "stfeco"))
x %>% filter(rowname %in% c("stflife", "stfeco"))
x
class(x)
x[x_row_low, x_col_low]
x[x_row_low, x_col_low]
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p[lower.tri(p)] - cmv
0.284 - 0.6
cmv
0.284 - 0.06
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
p <- x[x_row_up, x_col_up]
x_row_up <- match(cmv_vars, x[[1]])
x_col_up <- match(cmv_vars, names(x))
p <- x[x_row_up, x_col_up] # subset only the select variables
p
p[upper.tri(p)] - cmv
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the upper.tri
x[x_row_up, x_col_up] <- p # replace in the original data.frame
x
cmv_vars
cmv_vars <- c(cmv_vars, "agea")
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x_row_up <- match(cmv_vars, x[[1]])
x_col_up <- match(cmv_vars, names(x))
x <- as.data.frame(x)
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p
p[lower.tri(p)]
p[lower.tri(p)] - cmv
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
p <- x[x_row_up, x_col_up] # subset only the select variables
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the upper.tri
x[x_row_up, x_col_up] <- p # replace in the original data.frame
x
devtools::test()
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
cmv_tib
with(cmv, rowname %in% c("V4", "V5"))
with(cmv, cmv_tib$rowname %in% c("V4", "V5"))
cmv[cmv_tib$rowname %in% c("V4", "V5")), ]
cmv[cmv_tib$rowname %in% c("V4", "V5"), ]
cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
matr[1, 5]
matr <- cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
matr[1, 5]
matr[1, 6]
matr[2, 5]
matr[1, 6, drop = TRUE]
expect_equal(matr[1, 6, drop = TRUE], matr[2, 5])
expect_equal(matr[1, 6, drop = TRUE], matr[2, 5, drop = TRUE])
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
cmv_tib
corr_tibble
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V4, V5)
# Three variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
matr <- cmv_tib[cmv_tib$rowname %in% c("V3", "V4", "V5"), ]
matr
matr <- cmv_tib[cmv_tib$rowname %in% c("V3", "V4", "V5"), c("V3", "V4", "V5")]
matr
lower.tri(matr)
matr[lower.tri(matr)]
matr <- as.matrix(cmv_tib[cmv_tib$rowname %in% c("V3", "V4", "V5"), c("V3", "V4", "V5")])
matr
matr[lower.tri(matr)]
matr[lower.tri(matr)] == matr[upper.tri(matr)]
matr <- as.matrix(cmv_tib[cmv_tib$rowname %in% c("V3", "V4", "V5"), c("V3", "V4", "V5")])
expect_equal(matr[lower.tri(matr)], matr[upper.tri(matr)])
devtools::test()
devtools::test()
devtools::load_all()
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5, V5)
cmv_tib
library(testthat)
expect_is(cmv_tib, "data.frame")
# First column is the row names
expect_is(cmv_tib[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(cmv_tib[-1], is.numeric, FUN.VALUE = logical(1))))
expect_equal(nrow(cmv_tib), ncol(cmv_tib) - 1)
devtools::load_all()
devtools::test()
devtools::test()
result <-
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4, V4
)
devtools::test()
devtools::test()
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
sqp_data <- structure(list(question = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), quality = c(0.888361893312542,
0.67697429025685, 0.795403566232727, 0.703, 0.601, 0.657, 0.727,
1, 0.93), reliability = c(NA, NA, NA, 0.737, 0.624, 0.721, 0.797,
NA, NA), validity = c(NA, NA, NA, 0.954, 0.964, 0.911, 0.912,
NA, NA)), row.names = c(NA, -9L), class = c("tbl_df", "tbl",
"data.frame"), .Names = c("question", "quality", "reliability",
"validity"))
sqp_data
cmv_vars <- c("stfeco", "stflife")
if (length(cmv_vars) < 2) {
stop("You need to supply at least two variables to calculate the common method variance",
call. = FALSE)
}
if (is.matrix(x)) x <- tibble::as_tibble(x, rownames = "rowname")
sum_corr <- x[[1]] %in% cmv_vars
sum_sqp <- sqp_data[[1]] %in% cmv_vars
vars_corr <- cmv_vars %in% x[[1]]
vars_sqp <- cmv_vars %in% sqp_data[[1]]
if (sum(sum_corr) != length(cmv_vars)) {
stop("At least one variable not present in `x`: ",
paste0(cmv_vars[!vars_corr], collapse = ", "),
call. = FALSE)
}
if ((sum(sum_sqp) != length(cmv_vars))) {
stop("At least one variable not present in `sqp_data`: ",
paste0(cmv_vars[!vars_sqp], collapse = ", "),
call. = FALSE)
}
# If estimate_cmv ends up being exportable, then this needs
# to be moved inside estimate_cmv and find a way to pass
# cmv_vars to estimate_cmv
if (anyNA(sqp_data[sum_sqp, c("reliability", "validity")])) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(cmv_vars, collapse = ", "))
}
cmv <- estimate_cmv(sqp_data[sum_sqp, ])
cmv
x
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x_row_up <- match(cmv_vars, x[[1]])
x_col_up <- match(cmv_vars, names(x))
x_row_low
x_col_up
x_row_up
x_col_up
x <- as.data.frame(x)
p <- x[x_row_low, x_col_low]
x
p
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
x
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
x
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x <- as.data.frame(x)
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the lower.tri
p
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
x
x[upper.tri(x)]
as.numeric(x[upper.tri(x)])
all.equal(as.numeric(x[upper.tri(x)]), as.numeric(x[lower.tri(x)]))
as.numeric(x[upper.tri(x)]) == as.numeric(x[lower.tri(x)])
as.numeric(x[lower.tri(x)])
x[lower.tri(x)]
x
x[-1]
up_equal <- function(x) {
tp <- x[-1]
all(tp[lower.tri(tp)] == tp[upper.tri(tp)])
}
up_equal(x)
x
tp <- x[-1]
tp
tp[lower.tri(tp)]
tp[upper.tri(tp)]
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
cmv
cmv_vars
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x <- as.data.frame(x)
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
up_equal <- function(x) {
tp <- x[-1]
all(sort(tp[lower.tri(tp)]) == sort(tp[upper.tri(tp)]))
}
up_equal(x)
devtools::test()
devtools::test()
devtools::load_all()
up_equal <- function(x) {
tp <- x[-1]
all(sort(tp[lower.tri(tp)]) == sort(tp[upper.tri(tp)]))
}
# Two variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
matr <- cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Two variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
matr <- cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
matr
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
expect_true(up_equal(cmv_tib))
# Three variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
cmv_tib
cmv_tib[-1]
cmv_tib <- as.data.frame(sqp_cmv(corr_tibble, sqp_df, V3, V4, V5))
expect_true(up_equal(cmv_tib))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
