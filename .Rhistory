find_questions(1, "tvtot")
id_study = 1; question_name = "tvtot"
stopifnot(!missing(id_study), !missing(question_name))
all_columns = F
questions_df <- get_questions(id_study, all_columns = all_columns)
questions_df
sqp_env$question_variables
sqp_env$question_variables[3]
all_questions <- questions_df[[sqp_env$question_variables[3]]]
question_name
question_name <- c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"))
question_name <- c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt")
find_studies("ESS round 7")
id_study 579
id_study  = 579
questions_df <- get_questions(id_study, all_columns = all_columns)
all_questions <- questions_df[[sqp_env$question_variables[3]]]
paste0(question_name, collapse = "|")
question_name <- paste0(question_name, collapse = "|")
sel_rows <- grepl(question_name, all_questions, ignore.case = TRUE)
questions_df[sel_rows, ]
paste0("hey", collapse = "|")
find_questions(579, "^tv")
find_questions(579, "^tvtot")
find_questions(579, "")
find_questions(1, "tvtot")
find_questions(1, "^tv")
devtools::load_all(".")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj')
Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
all_qs <- c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt")
find_questions(576, all_qs)
find_studies("ESS round 7")
find_questions(579, all_qs)
find_questions(579, all_qs) %>% filter(language_iso == "eng")
library(tidyverse)
Sys.setenv(SQP_USER = 'cimentadaj')
Sys.setenv(SQP_PW = 'Lolasouno2')
sqp_login()
devtools::load_all(".")
sqp_login()
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <-
ess::recode_missings(
ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
)
all_qs <- c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt")
find_questions(579, all_qs)
find_questions(579, all_qs) %>% filter(language_iso == "deu")
find_questions(579, all_qs) %>% filter(language_iso == "eng")
all_qs
find_questions(579, all_qs) %>% filter(language_iso == "spa")
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id)
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates()
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
quality
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates()
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates() %>% arrange(question)
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates() %>% arrange(question)
quality %>% arrange(question)
quality[quality$question %in% selected_vars, ]
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates() %>% arrange(question) %>% filter(question %in% c("trstprl", "trstplt", "trstprt"))
find_questions(579, all_qs) %>% filter(language_iso == "spa")
find_questions(579, all_qs) %>% filter(country_iso == "ES", language_iso == "spa")
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% pull(id) %>% get_estimates() %>% arrange(question) %>% filter(question %in% c("trstprl", "trstplt", "trstprt"))
quality[quality$question %in% selected_vars, ]
find_questions(579, all_qs) %>% filter(language_iso == "spa")
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("trstprl", "trstplt", "trstprt"))
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt"))
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt")) %>%
find_questions(id_study = 579, 88895)
?get_questions
get_estimates(88895)
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt"))
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt")) %>% pull(id)
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt")) %>% pull(id) %>% get_estimates()
quality
find_questions(579, all_qs) %>% filter(language_iso == "spa") %>% filter(short_name %in% c("TrstPrl", "TrstPlt", "TrstPrt")) %>% pull(id) %>% get_estimates()
quality[quality$question %in% selected_vars, ]
Sys.setenv(SQP_USER = 'cimentadaj')
Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
get_estimates(1, TRUE)
devtools::document()
?get_estimates
devtools::document()
devtools::document()
?get_estimates
devtools::document()
?get_estimates
devtools::document()
?get_estimates
find_questions(1, "tvtot", TRUE)
sqp_login()
find_questions(1, "tvtot", TRUE)
devtools::document()
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj')
Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2")
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
#' @rdname get_estimates
#' @export
get_question_name <- function(id) {
stopifnot(is.numeric(id), length(id) >= 1)
collapsed_id <- paste0(id, collapse = ",")
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, collapsed_id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
}
make_estimate_df <- function(raw_data, var_name, id, all_columns = FALSE) {
# If empty estimates..
if (all(c(1, 1) == dim(raw_data))) {
sqp_data <-
sqp_construct_(var_name,
metrics = list(quality = NA_integer_), # random metric
all_columns)
# only for all columns, bc otherwise
# you the 4 column layout of sqp of
# short columns is lost
if (all_columns) sqp_data$question_id <- id
return(sqp_data)
}
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", var_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$short_estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
#' get_estimates(c(1, 2, 86), all_columns = TRUE)
#'
#' # Explore variable names
#'
#' get_question_name(1)
#'
#' get_question_name(1:10)
#'
#' }
#'
get_estimates <- function(id, all_columns = FALSE) {
stopifnot(is.numeric(id), length(id) >= 1)
collapsed_id <- paste0(id, collapse = ",")
url_id <- paste0(sqp_env$questions, collapsed_id, sqp_env$q_estimates)
q_name <- get_question_name(id)
raw_data <- object_request(url_id, estimates = TRUE)
list_data <- purrr::pmap(list(raw_data, q_name, id),
make_estimate_df,
all_columns = all_columns)
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- sqp_reconstruct(final_df)
final_df
}
sqp_login()
row_n <- 10
test_that("get_estimates returns correct output", {
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n))
expect_is(sqp_data, "sqp")
expect_length(sqp_data, 4)
expect_true(nrow(sqp_data) == row_n)
expect_true(all(sqp_env$sqp_columns %in% names(sqp_data)))
})
test_that("get_estimates returns all columns correctly", {
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n), all_columns = TRUE)
expect_length(sqp_data, length(sqp_env$all_estimate_variables))
expect_is(sqp_data, "sqp")
expect_true(nrow(sqp_data) == row_n)
expect_true(all(sqp_env$all_estimate_variables %in% names(sqp_data)))
})
# Here I chose one variable that was empty at the time.
# If this raises an error, then just find another empty variables
test_that("get_estimates converts empty estimates into missing tibble", {
sqp_data <- get_estimates(86, all_columns = TRUE)
expect_length(sqp_data, length(sqp_env$all_estimate_variables))
expect_is(sqp_data, "sqp")
expect_true(nrow(sqp_data) == 1)
expect_true(all(sqp_env$all_estimate_variables %in% names(sqp_data)))
# Right now two variables are being filled out. If that increases
# then the number just has to increase
expect_equivalent(sum(is.na(sqp_data)), length(sqp_env$all_estimate_variables) - 2)
})
test_that("get_question_name and get_estimates stop at length 0 numerics", {
expect_error(get_question_name(numeric(0)),
"length(.+) >= 1 is not TRUE")
expect_error(get_estimates(numeric(0)),
"length(.+) >= 1 is not TRUE")
})
set.seed(231321)
library(tibble)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.2, 0.6, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(5, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:5))
)
test_that("sqp_sscore returns correct output", {
result <-
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4
)
expect_s3_class(result, "data.frame")
expect_s3_class(result, "sqp")
expect_equal(nrow(result), 4)
expect_true(ncol(result) >= 3)
expect_is(result[[1]], "character")
})
test_that("sqp_sscore uses only unique variable names", {
result <-
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4, V4
)
expect_s3_class(result, "data.frame")
expect_s3_class(result, "sqp")
expect_equal(nrow(result), 4)
expect_true(ncol(result) >= 3)
expect_is(result[[1]], "character")
})
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.1, 0.4, 0.5, 0.5, 0.7),
validity = c(0.4, 0.7, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(6, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:6))
)
test_that("sqp_sscore checks for arguments", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore),
"`df` must have at least two columns"
)
tmp <- sample_data
tmp$V5 <- as.character(tmp$V5)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = tmp,
new_name = new_sumscore,
V1, V5),
"V1, V5 must be numeric variables in `df`"
)
## NOTEEEE##
## Check that all sqp_data are non-NA in all variables selected
})
test_that("sqp_sscore checks variables are in both dfs", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, random_var),
"One or more variables are not present in `df`: random_var"
)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V6),
"One or more variables are not present in `sqp_data`: V6"
)
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_sscore(
sqp_data = tmp,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
valid_class <- sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
expect_identical(valid_class, noclass)
})
test_that("sqp_sscore checks that there's non_NA's in important arguments", {
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.4, NA, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
),
"`sqp_data` must have non-missing values at variable/s: quality, reliability, validity")
sqp_df$validity[is.na(sqp_df$validity)] <- 0.5
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = NA,
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = 1,
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = c(1, 2),
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
})
test_that("sqp_sscore returns the exact result to decimal points", {
sqp_login()
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <-
ess::recode_missings(
ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
)
all_qs <- c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt")
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
expect_equal(score, 0.899183, tolerance = 0.01)
})
Sys.setenv(SQP_USER = 'cimentadaj')
Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
library(tibble)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.8, 0.1, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(5, rbinom(1000, 5, 0.6), simplify = FALSE),
paste0("V", 1:5))
)
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4
)
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
"V1", "V2", "V3"
)
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
devtools::load_all(".")
?get_estimates
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
devtools::load_all(".")
# Prepare data
library(tibble)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.8, 0.1, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(5, rbinom(1000, 5, 0.6), simplify = FALSE),
paste0("V", 1:5))
)
sample_data
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4
)
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
"V1", "V2", "V3"
)
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
devtools::test()
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
devtools::load_all(".")
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.set(SQP_PW = 'Lolasouno2')
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
install.packages("ess")
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <-
ess::recode_missings(
ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
)
devtools::check(env_vars = c(SQP_USER = 'cimentadaj', SQP_PW = "Lolasouno2"))
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::load_all(".")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::load_all(".")
row_n <- 10
test_that("get_estimates returns correct output", {
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n))
expect_is(sqp_data, "sqp")
expect_length(sqp_data, 4)
expect_true(nrow(sqp_data) == row_n)
expect_true(all(sqp_env$sqp_columns %in% names(sqp_data)))
})
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n))
sqp_login()
