test_that("sqp_sscore checks variables are in both dfs", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, random_var),
"One or more variables are not present in `df`: random_var"
)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V6),
"One or more variables are not present in `sqp_data`: V6"
)
})
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
sqp_data = tmp;
df = sample_data;
new_name <- "new_sumscore"
summary_name <- new_name <- "new_sumscore"
vars_names <- c("V1", "V2")
wt = NULL
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, sqp_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(sqp_env$sqp_columns, collapse = ", "))
}
formals(columns_sqp)
estimate_sscore(sqp_scores, the_vars, wt = wt)
estimate_sscore
sqp_env$sqp_columns
sqp_env$sqp_columns
sqp_env$sqp_columns['quality']
sqp_env$sqp_columns
which(sqp_env$sqp_columns == "quality")
validity <- sqp_env$sqp_columns[which(sqp_env$sqp_columns == "quality")]
qy2 <- sqp_data[[quality]]
reliability <- sqp_env$sqp_columns[which(sqp_env$sqp_columns == "reliability")]
validity <- sqp_env$sqp_columns[which(sqp_env$sqp_columns == "validity")]
quality <- sqp_env$sqp_columns[which(sqp_env$sqp_columns == "quality")]
qy2 <- sqp_data[[quality]]
# By squaring this you actually get the reliability
# coefficient.
ry <- sqrt(sqp_data[[reliability]])
vy <- sqrt(sqp_data[[validity]])
grep("qua", sqp_env$sqp_columns)
grep("qua", sqp_env$sqp_columns, value = TRUE)
reliability <- grep("^r", sqp_env$sqp_columns, value = TRUE)
validity <- grep("^v", sqp_env$sqp_columns, value = TRUE)
quality <- grep("^q", sqp_env$sqp_columns, value = TRUE)
reliability
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2')
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE
)
library("lavaan")
library("psych")
library("stargazer")
library("xtable")
library("tidyverse")
library("ess")
library("sqpr")
your_email <- Sys.getenv("your_email")
ess7es<-
ess_country("Spain", 7, your_email) %>%
recode_missings()
# Create composite scores
ess7es <-
ess7es %>%
mutate(poltrst = trstprl + trstplt + trstprt,
serv = stfedu + stfhlth,
systmrsp = psppsgv + psppipl + ptcpplt)
selected_vars <- c("trstprl", "trstplt", "trstprt",
"stfedu", "stfhlth", "psppsgv",
"psppipl", "ptcpplt", "ppltrst",
"polintr", "stflife", "stfeco",
"agea","eisced")
composite_scores <- c("poltrst", "serv", "systmrsp")
all_vars <- c(composite_scores, selected_vars) # for using later
ess7es
sqp_login()
study_id <- find_studies("ESS Round 7")$id
all(tolower(questions$short_name) %in% selected_vars[1:12])
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
all(tolower(questions$short_name) %in% selected_vars[1:12])
sqp_data <-
get_estimates(questions$id) %>%
arrange(question)
sqp_data
sqp_data %>%
sqp_sscore(df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
devtools::load_all(".")
sqp_data %>%
sqp_sscore(df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
devtools::load_all(".")
devtools::test()
sqp_data %>%
sqp_sscore(df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
Quality <-
sqp_data %>%
sqp_sscore(df = ess7es, new_name = poltrst, trstprl, trstplt, trstprt) %>%
sqp_sscore(df = ess7es, new_name = serv, stfedu, stfhlth) %>%
sqp_sscore(df = ess7es, new_name = systmrsp, psppsgv, psppipl, ptcpplt)
Quality
Quality
variables_order <- c("poltrst",
"serv",
"systmrsp",
"ppltrst",
"polintr",
"stflife",
"stfeco",
"agea",
"eisced")
Quality %>%
sqp_bind_metrics(agea, list(quality = 1)) %>%
sqp_bind_metrics(eisced, list(quality = 0.93))
Quality <-
Quality %>%
sqp_bind_metrics(agea, list(quality = 1)) %>%
sqp_bind_metrics(eisced, list(quality = 0.93))
ess7escorr <- ess7es %>% select(variables_order)
# Exploratory correlation matrix (in order of the columns in data frame):
original_corr_2 <- cor(ess7escorr, use = "complete.obs", method = "pearson")
original_corr_2
corr_q2
# This functions adjusts the diagonal of a correlation matrix with a quality measurement
# It accepts a matrix or a data frame with numeric variables and a numeric vector used
# as the adjustment of the diagonal. You can use the other arguments set in the
# cor() function
corr_q2 <-
sqp_correlate(x = ess7escorr,
diag_adj = Quality$quality,
use = "complete.obs",
method = "pearson")
corr_q2
Quality
ess7escorr
variables_order <- c("poltrst",
"serv",
"systmrsp",
"ppltrst",
"polintr",
"stflife",
"stfeco",
"agea",
"eisced")
# just ordering the data, nothing fancy
Quality <- slice(Quality,match(variables_order, .$question))
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE
)
library("lavaan")
library("psych")
library("stargazer")
library("xtable")
library("tidyverse")
library("ess")
library("sqpr")
your_email <- Sys.getenv("your_email")
ess7es<-
ess_country("Spain", 7, your_email) %>%
recode_missings()
# Create composite scores
ess7es <-
ess7es %>%
mutate(poltrst = trstprl + trstplt + trstprt,
serv = stfedu + stfhlth,
systmrsp = psppsgv + psppipl + ptcpplt)
selected_vars <- c("trstprl", "trstplt", "trstprt",
"stfedu", "stfhlth", "psppsgv",
"psppipl", "ptcpplt", "ppltrst",
"polintr", "stflife", "stfeco",
"agea","eisced")
composite_scores <- c("poltrst", "serv", "systmrsp")
all_vars <- c(composite_scores, selected_vars) # for using later
ess7es
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
all(tolower(questions$short_name) %in% selected_vars[1:12])
sqp_data <-
get_estimates(questions$id) %>%
arrange(question)
sqp_data
sqp_data %>%
sqp_sscore(df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
Quality <-
sqp_data %>%
sqp_sscore(df = ess7es, new_name = poltrst, trstprl, trstplt, trstprt) %>%
sqp_sscore(df = ess7es, new_name = serv, stfedu, stfhlth) %>%
sqp_sscore(df = ess7es, new_name = systmrsp, psppsgv, psppipl, ptcpplt)
Quality
Quality <-
Quality %>%
sqp_bind_metrics(agea, list(quality = 1)) %>%
sqp_bind_metrics(eisced, list(quality = 0.93))
Quality
variables_order <- c("poltrst",
"serv",
"systmrsp",
"ppltrst",
"polintr",
"stflife",
"stfeco",
"agea",
"eisced")
# just ordering the data, nothing fancy
Quality <- slice(Quality,match(variables_order, .$question))
slice(Quality, match(variables_order, .$question))
match(variables_order, Quality$question)
Quality[match(variables_order, Quality$question)), ]
Quality[match(variables_order, Quality$question), ]
# just ordering the data, nothing fancy
Quality <- Quality[match(variables_order, Quality$question), ]
ess7escorr <- ess7es %>% select(variables_order)
# Exploratory correlation matrix (in order of the columns in data frame):
original_corr_2 <- cor(ess7escorr, use = "complete.obs", method = "pearson")
original_corr_2
Quality
# This functions adjusts the diagonal of a correlation matrix with a quality measurement
# It accepts a matrix or a data frame with numeric variables and a numeric vector used
# as the adjustment of the diagonal. You can use the other arguments set in the
# cor() function
corr_q2 <-
sqp_correlate(x = ess7escorr,
diag_adj = Quality$quality,
use = "complete.obs",
method = "pearson")
corr_q2
sqp_cmv(x = corr_q2,
sqp_data = Quality,
stfeco, stflife)
corrr::fashion(corr_q2_cmv)
#subtract the cmv from the observed correlation
corr_q2_cmv <-
sqp_cmv(x = corr_q2,
sqp_data = Quality,
stfeco, stflife)
corrr::fashion(corr_q2_cmv)
install.packages("corrr")
corrr::fashion(corr_q2_cmv)
corr_q2_cmv
Quality %>%
filter(question %in% c("stflife", "stfeco")) %>%
sqpr:::estimate_cmv()
cmv <-
Quality %>%
filter(question %in% c("stflife", "stfeco")) %>%
sqpr:::estimate_cmv()
0.20 - cmv
0.27 - cmv
corrected_corr_2 <- corr_q2_cmv %>% select(-rowname) %>% as.matrix() %>% cov2cor()
corrected_corr_2
corrected_corr_2
summary(fit.corrected, standardized=T) #Prints in addition standardized results
fit <-
sem(model,
sample.cov=original_corr_2,
sample.nobs= 1624)
model<- "poltrst ~ ppltrst + stflife + polintr + stfeco + serv + systmrsp + agea + eisced"
# Model based on original correlation matrix
fit <-
sem(model,
sample.cov=original_corr_2,
sample.nobs= 1624)
# Model based on corrected correlation matrix
fit.corrected <-
sem(model,
sample.cov=corrected_corr,
sample.nobs= 1624)
corrected_corr <- corr_q2_cmv %>% select(-rowname) %>% as.matrix() %>% cov2cor()
corrected_corr
# Model based on corrected correlation matrix
fit.corrected <-
sem(model,
sample.cov=corrected_corr,
sample.nobs= 1624)
summary(fit.corrected, standardized=T) # Prints in addition standardized results
?inspect
source("https://bitbucket.org/!api/2.0/snippets/surveyqualityprediction/zeaezK/64ddc3d6c53ad00289a0742af25c0588e8b2c429/files/lavaan_inspect.R")
lavaan_inspect(fit)
inspect(fit, 'est')
inspect(fit, 'est')
summary(fit.corrected, standardized=T) # Prints in addition standardized results
summary(fit.corrected) # Prints in addition standardized results
inspect(fit, 'estimates')
inspect(fit, 'dx.free')
inspect(fit, 'partable')
inspect(fit, 'free')
inspect(fit, 'estimates')
summary(fit.corrected) # Prints in addition standardized results
parameterEstimates(fit.corrected)
class(parameterEstimates(fit.corrected))
parameterEstimates(fit.corrected)
parameterEstimates(fit)
map(list(fit, fit.corrected), parameterestimates)
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(rhs, est, ci.lower, ci.upper))
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(rep(c("original", "corrected"), each = 9))
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(rep(c("original", "corrected"), each = 9))
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.2))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.3))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(xlab = "Predictions")
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(xlab = "Predictions")
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictions")
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictors", y = "Estimated coefficients") +
theme_bw()
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictors", y = "Estimated coefficients") +
theme_bw()
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
#Change of R2:
R2-R2_uncorr
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
# Change of R2:
R2 - R2_uncorr
coef(fit.corrected) / coef(fit)
coef(fit.corrected) / coef(fit)
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
# Change of R2:
R2 - R2_uncorr
?sqp_cmv
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::build_vignettes()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::build_vignettes()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
usethis::use_package("lavaan", "suggests")
usethis::use_package("tidyverse", "suggests")
devtools::check()
usethis::use_package_doc()
devtools::document()
??sqpr
?sqpr
devtools::document()
devtools::document()
?sqpr
devtools::document()
?sqpr
?sqpr
devtools::document()
?sqpr
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
