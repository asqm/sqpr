#' sqp_df <-
#'  tibble(question = paste0("V", 1:5),
#'  quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
#'  reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
#'  validity = c(NA, NA, 0.6, 0.7, 0.8))
#'
#'
estimate_cmv <- function(sqp_data) {
sqp_reconstruct(sqp_data, c("reliability", "validity"))
# If estimate_cmv ends up being exportable, then this needs
# to be moved inside estimate_cmv and find a way to pass
# cmv_vars to estimate_cmv
if (anyNA(sqp_data)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(sqp_data[[1]], collapse = ", "))
}
first_part <- sqrt(sqp_data[["reliability"]])
second_part <- sqrt(1 - sqp_data[["validity"]])
cmv <- prod(c(first_part, second_part))
cmv
}
estimate_cmv(sqp_df)
sqp_df
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.7, 0.1, 0.6, 0.7, 0.8))
estimate_cmv(sqp_df)
sqp_cmv(corr_tibble, sqp_df, V4, V5)
nyNA(sqp_data)
anyNA(sqp_data)
sqp_df -> sqp_data
anyNA(sqp_data)
sqp_data[c("reliability", "validity")]
sqp_data[[1]]
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, 0.1, 0.6, 0.7, 0.8))
sqp_data <- sqp_df
sqp_data
(anyNA(sqp_data[c("reliability", "validity")]))
is.na(sqp_data)
sqp_data <- sqp_data[c("reliability", "validity")]
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, 0.1, 0.6, 0.7, 0.8))
sqp_df -> sqp_data
sqp_df
sqp_reconstruct(sqp_data, c("reliability", "validity"))
sqp_data <- sqp_data[c("question", "reliability", "validity")]
sqp_data
anyNA(sqp_data[c(2, 3)])
is.na(sqp_data)
which(is.na(sqp_data))
sqp_data
sqp_data[, 1]
devtools::test()
devtools::test()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("estimate_cmv")
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.5, 0.1, 0.6, 0.7, 0.8))
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.5, 0.1, 0.6, 0.7, 0.8))
estimate_cmv(sqp_df)
library(testthat)
expect_is(result, "numeric")
result <- estimate_cmv(sqp_df)
expect_is(result, "numeric")
expect_length(result, 1)
expect_is(result, "double")
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, 0.1, 0.6, 0.7, 0.8))
estimate_cmv(sqp_df)
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, 0.1, 0.6, 0.7, 0.8))
expect_error(estimate_cmv(sqp_df),
"`sqp_data` must have non-missing values at columns reliability and validity for all variables")
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
random_name = c(NA, 0.1, 0.6, 0.7, 0.8))
estimate_cmv(sqp_df)
expect_error(estimate_cmv(sqp_df),
"Variables reliability, validity must be available in `sqp_data`")
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
random_name = rep(NA, 5))
expect_error(estimate_cmv(sqp_df),
"`sqp_data` must have non-missing values at columns reliability and validity for all variables")
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
random_name = rep(NA, 5))
sqp_df
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = rep(NA, 5))
expect_error(estimate_cmv(sqp_df),
"`sqp_data` must have non-missing values at columns reliability and validity for all variables")
devtools::test()
devtools::test()
dplyr::between(1:5, 1, 2)
available_vars <- c("reliability", "validity")
sqp_dat
sqp_data
sqp_df
sqp_data <- sqp_df
purrr::map(sqp_df, ~ all(is.na(.x)))
purrr::map_lgl(sqp_df, ~ all(is.na(.x)))
nonna_vars <- available_vars[!is_na]
purrr::walk(sqp_data[available_vars], col_checker)
is_na <- purrr::map_lgl(sqp_df, ~ all(is.na(.x)))
nonna_vars <- available_vars[!is_na]
purrr::walk(sqp_data[available_vars], col_checker)
nonna_vars <- available_vars[!is_na]
purrr::walk(sqp_data[nonna_vars], col_checker)
nonna_vars <- available_vars[!is_na]
nonna_vars
available_vars
is_na
which(is_na)
names(which(is_na))
is_na
sqp_data <- sqp_data[!is_na]
sqp_data
purrr::walk(sqp_data[available_vars], col_checker)
devtools::test()
devtools::test()
devtools::test()
sqp_df <-
tibble::tibble(question = paste0("V", 1:5),
quality = rep(NA, 5),
reliability = rep(NA, 5),
validity = rep(NA, 5))
expect_error(estimate_cmv(sqp_df),
"`sqp_data` must have non-missing values at columns reliability and validity for all variables")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::check()
devtools::test()
devtools::test()
devtools::test()
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
cmv_aut <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
cmv_manual <- sqp_cmv(corr_tibble, sqp_df, V4, V5, cmv = estimate_cmv(sqp_df))
sqp_df
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.6, 0.4, 0.5, 0.5, 0.7),
validity = c(0.9, 0.5, 0.6, 0.7, 0.8))
cmv_aut <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
cmv_manual <- sqp_cmv(corr_tibble, sqp_df, V4, V5, cmv = estimate_cmv(sqp_df))
cmv_manual
expect_equal(cmv_aut, cmv_manual)
cmv_out
cmv_aut
cmv_manual
filtered_df <- subset(sqp_df, question %in% c("V4", "V5"))
cmv_aut <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
cmv_manual <- sqp_cmv(corr_tibble, sqp_df, V4, V5, cmv = estimate_cmv(filtered_df))
expect_equal(cmv_aut, cmv_manual)
devtools::test()
covr::report()
devtools::document()
devtools::check()
library(tidyverse)
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
sqp_data
devtools::install()
sqpr::estimate_cmv
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
library(sqp)
library(sqpr)
estimate_cmv(less_sqp)
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
#### Estimating the common method variance by hand ####
library(tidyverse)
library(sqpr)
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
# Ok, so we have a nice SQP data set
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
less_sqp
estimate_cmv(less_sqp)
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
less_sqp
estimate_cv
estimate_cmv
devtools::test()
devtools::check()
devtools::install()
library(tidyverse)
library(sqpr)
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
# Ok, so we have a nice SQP data set
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
estimate_cmv(less_sqp)
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
ess_data <- ess::ess_rounds(7, "cimentadaj@gmail.com")
ess_data <- ess::ess_rounds(2, "cimentadaj@gmail.com")
show_rounds()
ess::show_rounds()
ess_data <- ess::ess_rounds(7, "cimentadaj@gmail.com")
?ess_rounds
ess_data <- ess::ess_rounds(7, "cimentadaj@gmail.com")
ess_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
# Ok, so we have a nice SQP data set
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
estimate_cmv(less_sqp)
# Behind the scenes the formula is actually really easy:
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
variable_names <- sqp_data[[1]]
sqp_correlate(sqp_data[variable_names])
?sqp_correlate
sqp_correlate(sqp_data[variable_names], sqp_data$quality)
ess_data[variable_names]
library(ess)
ess <- ess %>% recode_missings()
ess_data <- ess_data %>% recode_missings()
summary(ess_data[variable_names])
sqp_correlate(ess_data[variable_names], sqp_data$quality)
variables <- c("stflife", "stfeco", "stfedu")
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
filter(rowname %in% variables)
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
dplyr::filter(rowname %in% variables)
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
filter(question %in% variables)
variables <- c("stflife", "stfeco", "stfedu", "poltrst")
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
filter(question %in% variables)
# Ok, so we have a nice SQP data set
sqp_data
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
variables <- c("stflife", "stfeco", "stfedu", "ppltrst")
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
filter(question %in% variables)
# Ok, so we have a nice SQP data set
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
estimate_cmv(less_sqp)
# Behind the scenes the formula is actually really easy:
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
variable_names <- sqp_data[[1]]
sqp_correlate(ess_data[variable_names], sqp_data$quality)
sqp_correlate(ess_data[variable_names],
diag = sqp_data$quality)
sqp_correlate(ess_data[variable_names],
diag = sqp_data$quality)
corr_matrix <-
sqp_correlate(ess_data[variable_names],
diag = sqp_data$quality)
sqp_cmv(corr_matrix, # original corr matrix
sqp_data, # the sqp data with the estimates
cmv = our_cmv, # our manual calculationg of the cmv
stflife, stfeco) # and the variables to adjut the cmv
(our_cmv <- estimate_cmv(less_sqp))
# 1
sqp_cmv(corr_matrix, # original corr matrix
sqp_data, # the sqp data with the estimates
cmv = our_cmv, # our manual calculationg of the cmv
stflife, stfeco) # and the variables to adjut the cmv
sqp_cmv(corr_matrix, # original corr matrix
sqp_data, # the sqp data with the estimates
stflife, stfeco) # and the variables to adjut the cmv
corr_matrix
adj_matrix
adj_matrix <-
sqp_cmv(corr_matrix, # original corr matrix
sqp_data, # the sqp data with the estimates
stflife, stfeco) # and the variables to adjut the cmv
adj_matrix
corr_matrix
adj_matrix
corr_matrix
adj_matrix
our_cmv
variables <- c("stflife", "stfeco", "stfedu", "ppltrst")
# Read in the sqp data
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp")) %>%
filter(question %in% variables)
# Ok, so we have a nice SQP data set
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
(our_cmv <- estimate_cmv(less_sqp))
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
devtools::check()
?estimate_cmv
?estimate_cmv
devtools::document()
?estimate_cmv
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, 0.1, 0.6, 0.7, 0.8))
estimate_cmv(sqp_df)
devtools::document()
?estimate_cmv
?sqp_cmv
set.seed(2131)
library(tibble)
corr_tibble <- sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20), rnorm(5))
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
corr_tibble
sqp_cmv(corr_tibble, sqp_df, V4, V5)
devtools::document()
devtools::test()
