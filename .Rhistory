"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
devtools::load_all()
sqp_sscore(sqp_data = quality,
df = the_data,
new_name = poltrst,
trstprl, trstplt, trstprt)
sqp_sscore(sqp_data = sqp_data,
df = the_data,
new_name = poltrst,
trstprl, trstplt, trstprt)
the_data
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
selected_vars <- c("stflife", "stfeco")
df <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
sqp_data <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = stf,
stflife, stfeco)
selected_vars <- c("stflife", "stfeco", "stfedu")
df <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
sqp_data <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = stf,
stflife, stfeco, stfedu)
selected_vars <- c("trstprl", "trstplt", "trstprt")
df <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
sqp_data <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
devtools::load_all()
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
p <- sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
p
p[["quality"]]
p[["quality"]][10]
selected_vars <- c("trstprl", "trstplt", "trstprt")
df <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
sqp_data <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
devtools::load_all()
sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
p <- sqp_sscore(sqp_data = sqp_data,
df = df,
new_name = poltrst,
trstprl, trstplt, trstprt)
p[["quality"]][10]
devtools::test()
devtools::check()
50/12
devtools::test()
library(tibble)
set.seed(2131)
corr_tibble <- sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20), rnorm(5))
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
corr_tibble
sqp_cmv(corr_tibble, sqp_df, V4, V5)
devtools::check()
devtools::test()
Sys.time()
sessionInfo()
devtoools::test()
devtools::test()
?cor
devtools::test()
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
devtools::load_all()
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
quality
devtools::load_all()
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
quality[quality$question %in% selected_vars, ]
the_data
ess::ess_country("Spain", 7, "cimentadaj@gmail.com")
devtools::install_github("cimentadaj/ess")
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
expect_equal(score, 0.985193, tolerance = 0.01)
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
devtools::load_all()
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
score
devtools::test()
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
qr2 <- sqp_data[[top_env$sqp_columns[1]]]
quality
sqp_data <- quality
qr2 <- sqp_data[[top_env$sqp_columns[1]]]
qr2
std_data <- purrr::map_dbl(the_data, stats::sd, na.rm = TRUE)
std_data
sqp_data
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
df <- the_data
sqp_data <- quality
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
devtools::load_all()
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
vars_names <- selected_vars
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
the_vars
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
wt <- NULL
sqp_data <- sqp_score
sqp_data <- sqp_scores
the_data <- df
wt = NULL
sqp_data
if (is.null(wt)) wt <- rep(1, length(the_data))
wt
is_numeric <- is.numeric(wt)
is_na <- anyNA(wt)
correct_length <- length(wt) == ncol(the_data)
if (!is_numeric | is_na | !correct_length) {
stop("`wt` must be a non-NA numeric vector with the same length as the number of variables")
}
# 1 is validity
# 2 is reliability
# 3 is validity
qr2 <- sqp_data[[top_env$sqp_columns[1]]]
qr2
ry <- sqrt(sqp_data[[top_env$sqp_columns[2]]])
vy <- sqrt(sqp_data[[top_env$sqp_columns[3]]])
ry
vy
# Method effect
method_e <- sqrt(1 - vy^2)
method_e
round(method_e, 3)
round(method_e, 2)
qy2
qy2 <- sqp_data[[top_env$sqp_columns[1]]]
qy2
ry
vy
method_e <- sqrt(1 - vy^2)
method_e
wt
std_data <- purrr::map_dbl(the_data, stats::sd, na.rm = TRUE)
std_data
var_e <- variance_error(qr2, std_data)
var_e
the_data
summarize(the_data)
summary(the_data)
map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
purrr::map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
the_data <- purrr::map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
summary(the_data)
std_data <- purrr::map_dbl(the_data, stats::sd, na.rm = TRUE)
std_data
var_e <- variance_error(qr2, std_data)
var_e
variance_error
var_e <- variance_error(qy2, std_data)
var_e
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
var_e <- qcoef_observed(qy2, std_data)
qcoef_observed <- function(quality, std_data) {
purrr::map2_dbl(quality, std_data, ~ (1 - .x) * .y^2)
}
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
var_e <- qcoef_observed(qy2, std_data)
var_e
std_data
method_effect
method_e
vy
method_e <- sqrt(1 - vy^2)
method_e
std_data <- purrr::map_dbl(the_data, stats::sd, na.rm = TRUE)
std_data
var_e <- qcoef_observed(qy2, std_data)
var_e
weights_by_qcoef <- sum(wt^2 * q_coef)
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
q_coef <- qcoef_observed(qy2, std_data)
weights_by_qcoef <- sum(wt^2 * q_coef)
weights_by_qcoef <- wt^2 * q_coef
weights_by_qcoef
weights_by_qcoef <- sum(wt^2 * q_coef)
weights_by_qcoef
comb <- utils::combn(seq_along(the_data), 2, simplify = FALSE)
comb
cov_both
?prod
prod(c(1, 2, 3), c(2, 3, 1))
gamma(8)
cov_both <- function(combinations, r_coef, method_e) {
# This formula is not complicated. It's simply the product of
# the standard deviation of the data, the r_coef and the
# method effect between all combination of questions.
cov_formula <- function(one, two, std_data, r_coef, method_e) {
(std_data[one] * r_coef[one] * method_e[one]) *
(std_data[two] * r_coef[two] * method_e[two])
}
# Here I apply the formula to all combinations. combinations
# must be a list where each slot is of length 2 with a pair
# combination. The whole list must contain all combinations
result <- purrr::map_dbl(combinations, function(index) {
index_one <- index[1]
index_two <- index[2]
result <- purrr::map2_dbl(index_one, index_two, cov_formula,
std_data, r_coef, method_e)
result
})
result
}
comb <- utils::combn(seq_along(the_data), 2, simplify = FALSE)
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_both <- function(combinations, std_data, r_coef, method_e) {
# This formula is not complicated. It's simply the product of
# the standard deviation of the data, the r_coef and the
# method effect between all combination of questions.
cov_formula <- function(one, two, std_data, r_coef, method_e) {
(std_data[one] * r_coef[one] * method_e[one]) *
(std_data[two] * r_coef[two] * method_e[two])
}
# Here I apply the formula to all combinations. combinations
# must be a list where each slot is of length 2 with a pair
# combination. The whole list must contain all combinations
result <- purrr::map_dbl(combinations, function(index) {
index_one <- index[1]
index_two <- index[2]
result <- purrr::map2_dbl(index_one, index_two, cov_formula,
std_data, r_coef, method_e)
result
})
result
}
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_e
# This the multiplication of all variable combinations
# using ri * mi * mj * rj * si * sj
# It's better not to use this in isolation but call
# estimate_sscore as a whole.
cov_e <- cov_both(comb, std_data, ry, method_e)
cov_e
combn_multiplication
# you need to calculate the product of a combination
# of the weights by the covariance of errors.
intm <- combn_multiplication(comb, wt, cov_e)
intm
# you need to calculate the product of a combination
# of the weights by the covariance of errors.
intm <- sum(combn_multiplication(comb, wt, cov_e)) * 2
intm
var_ecs <- weights_by_qcoef + intm
var_ecs
var_composite <- stats::var(rowSums(the_data, na.rm = TRUE))
var_composite
1 - (var_ecs / var_composite)
round(1 - (var_ecs / var_composite), 5)
round(1 - (var_ecs / var_composite), 6)
devtools::load_all()
library(testthat)
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
the_data <-  purrr::map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
summary(the_data)
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
score
expect_equal(score, 0.867985, tolerance = 0.01)
devtools::test()
