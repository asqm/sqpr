}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
sqp_scores
the_vars
weights
wt <- NULL
estimate_sscore(sqp_scores, the_vars, wt = wt)
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
generic_sqp(summary_name, new_estimate)
summary_name <- new_name
generic_sqp(summary_name, new_estimate)
additional_rows <- generic_sqp(summary_name, new_estimate)
sqp_data[!rows_to_pick, ]
sqp_data
quality
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(rowname = tolower(ion)) %>%
select(rowname, everything(), -ion) %>%
mutate_at(-1, as.numeric)
sqp_data <- quality
sqp_data
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
new_estimate
additional_rows <- generic_sqp(summary_name, new_estimate)
additional_rows
sqp_data[!rows_to_pick, ]
combined_matrix <- dplyr::bind_rows(sqp_data[!rows_to_pick, ], additional_rows)
combined_matrics
combined_matrix
additional_rows
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(rowname, everything(), -ion) %>%
mutate_at(-1, as.numeric)
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(question, everything(), -ion) %>%
mutate_at(-1, as.numeric)
sqp_data <- quality
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Turn all variables into a list and delete the 'list'
# from the new character vector
vars_names <- as.character(substitute(list(...)))[-1]
summary_name <- as.character(substitute(new_name))
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
additional_rows <- generic_sqp(summary_name, new_estimate)
# Bind the unselected questions with the new sumscore
combined_matrix <- dplyr::bind_rows(sqp_data[!rows_to_pick, ], additional_rows)
combined_matrix
structure(combined_matrix, class = c(class(combined_matrix), "sqp"))
library(tidyverse)
the_data <-
ess::ess_country("Spain", 7, "cimentadaj@gmail.com")
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(question, everything(), -ion) %>%
mutate_at(-1, as.numeric)
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
devtools::load_all()
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
sqp_sscore(quality, the_data %>% select(1:4), pltrst, trstprl, trstplt, trstprt)
sqp_sscore(quality %>% select(1:4), the_data, pltrst, trstprl, trstplt, trstprt)
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
c("question", top_env$sqp_columns)
everything()
?everything
correct_order <- c("question", top_env$sqp_columns)
devtools::load_all()
library(tidyverse)
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <-
ess::ess_country("Spain", 7, "cimentadaj@gmail.com") %>%
select(selected_vars)
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(question, everything(), -ion) %>%
mutate_at(-1, as.numeric)
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
quality
#' )
#'
#' sqp_sscore(
#' sqp_data = sqp_df,
#' df = sample_data,
#' new_name = new_sumscore,
#' "V1", "V2", "V3"
#' )
#'
#'
sqp_sscore <- function(sqp_data, df, new_name, ..., wt = NULL) {
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Turn all variables into a list and delete the 'list'
# from the new character vector
vars_names <- as.character(substitute(list(...)))[-1]
summary_name <- as.character(substitute(new_name))
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
additional_rows <- generic_sqp(summary_name, new_estimate)
# Bind the unselected questions with the new sumscore
combined_matrix <- dplyr::bind_rows(sqp_data[!rows_to_pick, ], additional_rows)
correct_order <- c("question", top_env$sqp_columns)
new_order <- combined_matrix[c(correct_order, setdiff(names(combined_matrix), correct_order))]
structure(combined_matrix, class = c(class(combined_matrix), "sqp"))
}
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
#' )
#'
#' sqp_sscore(
#' sqp_data = sqp_df,
#' df = sample_data,
#' new_name = new_sumscore,
#' "V1", "V2", "V3"
#' )
#'
#'
sqp_sscore <- function(sqp_data, df, new_name, ..., wt = NULL) {
# Check SQP data has correct class and formats
sqp_data <- sqp_reconstruct(sqp_data)
# Turn all variables into a list and delete the 'list'
# from the new character vector
vars_names <- as.character(substitute(list(...)))[-1]
summary_name <- as.character(substitute(new_name))
# Check all variables present in df
vars_not_matched <- !vars_names %in% names(df)
if (any(vars_not_matched)) {
stop("One or more variables are not present in `df`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
# Check all variables present in sqp_data
vars_not_matched <- !vars_names %in% sqp_data[[1]]
if (any(vars_not_matched)) {
stop("One or more variables are not present in `sqp_data`: ",
paste0(vars_names[vars_not_matched], collapse = ", "),
call. = FALSE)
}
the_vars <- df[vars_names]
# Check all variables are numeric and there are at least two columns in the df data
if (!all(purrr::map_lgl(the_vars, is.numeric))) {
stop(paste0(vars_names, collapse = ", "), " must be numeric variables in `df`")
}
if (ncol(the_vars) < 2) stop("`df` must have at least two columns")
# Select the rows with only the selected variales
# for the sumscore
rows_to_pick <- sqp_data[[1]] %in% vars_names
sqp_scores <- sqp_data[rows_to_pick, top_env$sqp_columns]
if (anyNA(sqp_scores)) {
stop("`sqp_data` must have non-missing values at variable/s: ",
paste0(top_env$sqp_columns, collapse = ", "))
}
new_estimate <-
columns_sqp("quality", estimate_sscore(sqp_scores, the_vars, wt = wt))
additional_rows <- generic_sqp(summary_name, new_estimate)
# Bind the unselected questions with the new sumscore
combined_matrix <- dplyr::bind_rows(sqp_data[!rows_to_pick, ], additional_rows)
correct_order <- c("question", top_env$sqp_columns)
new_order <- combined_matrix[c(correct_order, setdiff(names(combined_matrix), correct_order))]
structure(new_order, class = c(class(new_order), "sqp"))
}
sqp_sscore(quality, the_data, pltrst, trstprl, trstplt, trstprt)
sqp_sscore(quality %>% select(1:3), the_data, pltrst, trstprl, trstplt, trstprt)
sqp_sscore(quality %>% select(1:4), the_data, pltrst, trstprl, trstplt, trstprt)
devtools::test()
devtools::test()
devtools::test()
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
devtools::load_all()
devtools::test()
devtools::test()
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(0.4, NA, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
)
sample_data <-
as_tibble(
setNames(
replicate(5, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:5))
)
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
)
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
),
"`sqp_data` must have non-missing values at variable/s: quality, reliability, validity")
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(0.2, 0.4, 0.5, 0.5, 0.7),
validity = c(0.4, NA, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
),
"`sqp_data` must have non-missing values at variable/s: quality, reliability, validity")
sqp_df$validity[is.na(sqp_df$validity)] <- 0.5
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
)
expect_true(ncol(result) >= 3)
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2
)
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = NA
)
devtools::document()
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = NA,
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = 1,
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
expect_error(
sqp_sscore(
sqp_df,
sample_data,
new_name = new_sumscore,
V1, V2,
wt = c(1, 2),
"`weights` must be a non-NA numeric vector with the same length as the number of variables")
)
devtools::test()
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(question, everything(), -ion) %>%
mutate_at(-1, as.numeric)
library(tidyverse)
# # Quality estimates
quality <-
suppressMessages(suppressWarnings(read_csv2("SQPexport_20171230_2255.csv"))) %>%
select(question = `Question name`,
ends_with("2)"),
matches("\\scoefficient\\s(.*)"), -contains("Method effect")) %>%
set_names(~ str_sub(.x, start = -3) %>% str_replace_all("[:punct:]", "")) %>%
rename(reliability = r2,
validity = v2,
quality = q2,
r_coef = r,
v_coef = v,
q_coef = q) %>%
mutate(question = tolower(ion)) %>%
select(question, everything(), -ion) %>%
mutate_at(-1, as.numeric)
deput(quality)
dput(quality)
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
quality
estimate_sscore(quality, the_data)
estimate_sscore(quality, the_data, wt = NULL)
quality
the_data
estimate_sscore(quality, the_data, wt = NULL)
estimate_sscore(quality, the_data, wt = NULL)
ls()
estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
score <- estimate_sscore(quality[quality$question %in% selected_vars, ], the_data, wt = NULL)
expect_equal(score, 0.9799974)
score
expect_identical(score, 0.9799974)
?expect_equal
expect_equal(score, 0.9799974, tolerance = 0.01)
devtools::test()
devtools::test()
