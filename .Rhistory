p <- x[x_row_low, x_col_low]
x
p
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
x
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
x
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x <- as.data.frame(x)
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the lower.tri
p
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
x
x[upper.tri(x)]
as.numeric(x[upper.tri(x)])
all.equal(as.numeric(x[upper.tri(x)]), as.numeric(x[lower.tri(x)]))
as.numeric(x[upper.tri(x)]) == as.numeric(x[lower.tri(x)])
as.numeric(x[lower.tri(x)])
x[lower.tri(x)]
x
x[-1]
up_equal <- function(x) {
tp <- x[-1]
all(tp[lower.tri(tp)] == tp[upper.tri(tp)])
}
up_equal(x)
x
tp <- x[-1]
tp
tp[lower.tri(tp)]
tp[upper.tri(tp)]
x <- structure(list(rowname = c("poltrst", "serv", "systmrsp", "ppltrst",
"polintr", "stflife", "stfeco", "agea", "eisced"), poltrst = c(0.888361893312542,
0.433441310532432, 0.561508920482659, 0.198273310671979, -0.0315581255676228,
0.164901990585374, 0.417044923632429, -0.0063307489081347, -0.0315581255676228
), serv = c(0.433441310532432, 0.67697429025685, 0.306510468876596,
0.14446653948857, -0.0401442192534752, 0.208257178663944, 0.363738792683639,
-0.0350968972159539, -0.0401442192534752), systmrsp = c(0.561508920482659,
0.306510468876596, 0.795403566232727, 0.184077309759733, 0.022247136983779,
0.163155304252759, 0.32918674340278, -0.030826815791153, 0.022247136983779
), ppltrst = c(0.198273310671979, 0.14446653948857, 0.184077309759733,
0.703, 0.144007725796816, 0.139281917163141, 0.106770166160751,
-0.0631596636050755, 0.144007725796816), polintr = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 0.601,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
1), stflife = c(0.164901990585374, 0.208257178663944, 0.163155304252759,
0.139281917163141, 0.0574479486328371, 0.657, 0.284796724426574,
-0.049630294931243, 0.0574479486328371), stfeco = c(0.417044923632429,
0.363738792683639, 0.32918674340278, 0.106770166160751, -0.0283797721444752,
0.284796724426574, 0.727, -0.0168853419643493, -0.0283797721444752
), agea = c(-0.0063307489081347, -0.0350968972159539, -0.030826815791153,
-0.0631596636050755, -0.439491063466151, -0.049630294931243,
-0.0168853419643493, 1, -0.439491063466151), eisced = c(-0.0315581255676228,
-0.0401442192534752, 0.022247136983779, 0.144007725796816, 1,
0.0574479486328371, -0.0283797721444752, -0.439491063466151,
0.93)), .Names = c("rowname", "poltrst", "serv", "systmrsp",
"ppltrst", "polintr", "stflife", "stfeco", "agea", "eisced"), row.names = c(NA,
-9L), class = c("tbl_df", "tbl", "data.frame"))
x
cmv
cmv_vars
# Here I sort because if not I would be
# getting the index of the upper triangle
# and we want to work with the lower.tri
x_row_low <- sort(match(cmv_vars, x[[1]]))
x_col_low <- sort(match(cmv_vars, names(x)))
x <- as.data.frame(x)
# Because we only want to adjust the triangle
# below the diagonal, we ignore the upper triangle.
# The upper triangle will be eliminated in future call.
p <- x[x_row_low, x_col_low] # subset only the select variables
p[lower.tri(p)] <- p[lower.tri(p)] - cmv # adjust the lower.tri
p[upper.tri(p)] <- p[upper.tri(p)] - cmv # adjust the lower.tri
x[x_row_low, x_col_low] <- p # replace in the original data.frame
x
up_equal <- function(x) {
tp <- x[-1]
all(sort(tp[lower.tri(tp)]) == sort(tp[upper.tri(tp)]))
}
up_equal(x)
devtools::test()
devtools::test()
devtools::load_all()
up_equal <- function(x) {
tp <- x[-1]
all(sort(tp[lower.tri(tp)]) == sort(tp[upper.tri(tp)]))
}
# Two variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
matr <- cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Two variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
matr <- cmv_tib[cmv_tib$rowname %in% c("V4", "V5"), ]
matr
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
expect_true(up_equal(cmv_tib))
# Three variables
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V3, V4, V5)
cmv_tib
cmv_tib[-1]
cmv_tib <- as.data.frame(sqp_cmv(corr_tibble, sqp_df, V3, V4, V5))
expect_true(up_equal(cmv_tib))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
sqpr:::estimate_cmv
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = vy^2)
library(tidyverse)
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = vy^2)
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = sqrt(vy))
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = c(0.770, 0.805, 0.767))
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = c(0.770, 0.805, 0.767),
w = 1)
sqpr:::estimate_sscore
devtools::load_all()
the_data <-
tibble(stand.dev = c(2.59131, 2.235977, 2.166643),
ry = c(0.9027735, 0.9088454, 0.9241212),
vy = c(0.9715966, 0.9874209, 0.9476286),
qy2 = c(0.770, 0.805, 0.767),
w = 1)
qcoef_observed(the_data$qy2, the_data$stand.dev)
comb <- utils::combn(seq_along(the_data$stand.dev), 2, simplify = FALSE)
method_e <- sqrt(1 - vy^2)
stand.dev = c(2.59131, 2.235977, 2.166643)
ry = c(0.9027735, 0.9088454, 0.9241212)
vy = c(0.9715966, 0.9874209, 0.9476286)
qy2 = c(0.770, 0.805, 0.767)
w = c(1, 1, 1)
(q_coef <- qcoef_observed(qy2, stand.dev))
(method_e <- sqrt(1 - the_datavy^2))
(method_e <- sqrt(1 - vy^2))
(q_coef <- qcoef_observed(qy2, stand.dev))
stand.dev <- c(2.59131, 2.235977, 2.166643)
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
qy2 <- c(0.770, 0.805, 0.767)
(my <- sqrt(1 - vy^2))
(q_coef <- qcoef_observed(qy2, stand.dev))
stand.dev <- c(2.59131, 2.235977, 2.166643)
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
(my <- sqrt(1 - vy^2))
qy2 <- c(0.770, 0.805, 0.767)
w <- c(1, 1, 1)
(q_coef <- qcoef_observed(qy2, stand.dev))
comb <- utils::combn(seq_along(stand.dev), 2, simplify = FALSE)
(cov_e <- cov_both(comb, std.dev, ry, my))
(cov_e <- cov_both(comb, stand.dev, ry, my))
estimate_sscore
intm <- sum(combn_multiplication(comb, w, cov_e)) * 2
intm
(weights_by_qcoef <- sum(wt^2 * q_coef))
(weights_by_qcoef <- sum(w^2 * q_coef))
(intm <- sum(combn_multiplication(comb, w, cov_e)) * 2)
(var_ecs <- weights_by_qcoef + intm)
var_composite <- 38.53979
1 - (var_ecs / var_composite)
qcoef_observed
stand.dev <- c(2.59131, 2.235977, 2.166643)
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
(my <- sqrt(1 - vy^2))
qy2 <- c(0.770, 0.805, 0.767)
w <- c(1, 1, 1)
(q_coef <- sqpr:::qcoef_observed(qy2, stand.dev))
# Generate all possible variable combinations
comb <- utils::combn(seq_along(stand.dev), 2, simplify = FALSE)
(cov_e <- sqpr:::cov_both(comb, stand.dev, ry, my))
# This is correct but not in the same order!
(weights_by_qcoef <- sum(w^2 * q_coef))
(intm <- sum(sqpr:::combn_multiplication(comb, w, cov_e)) * 2)
(var_ecs <- weights_by_qcoef + intm)
(var_composite <- 38.53979)
# Final quality score
(1 - (var_ecs / var_composite))
sqpr:::estimate_cmv
readr::read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
sqp_data <- structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "trstprl", "stflife", "stfeco", "stfedu",
"stfhlth", "trstplt", "trstprt"), quality = c(0.703, 0.601, 0.709,
0.707, 0.711, 0.779, 0.657, 0.727, 0.635, 0.607, 0.822, 0.821
), reliability = c(0.737, 0.624, 0.766, 0.762, 0.766, 0.812,
0.721, 0.797, 0.757, 0.76, 0.852, 0.858), validity = c(0.954,
0.964, 0.927, 0.928, 0.928, 0.959, 0.911, 0.912, 0.838, 0.798,
0.965, 0.956)), class = c("tbl_df", "tbl", "data.frame", "sqp"
), row.names = c(NA, 12L), .Names = c("question", "quality",
"reliability", "validity"))
sqp_data
sqp_data %>%
filter(question %in% c("stflife", "stfeco"))
filter(sqp_data, question %in% c("stflife", "stfeco"))
sqp_data
subset(sqp_data, question %in% c("stflife", "stfeco"))
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
sqpr:::estimate_cmv(less_sqp)
sqrt(less_sqp$reliability) * (1 - sqrt(less_sqp$validity))
prod(sqrt(less_sqp$reliability) * (1 - sqrt(less_sqp$validity)))
sqpr:::estimate_cmv
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
sqp_data <- structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "trstprl", "stflife", "stfeco", "stfedu",
"stfhlth", "trstplt", "trstprt"), quality = c(0.703, 0.601, 0.709,
0.707, 0.711, 0.779, 0.657, 0.727, 0.635, 0.607, 0.822, 0.821
), reliability = c(0.737, 0.624, 0.766, 0.762, 0.766, 0.812,
0.721, 0.797, 0.757, 0.76, 0.852, 0.858), validity = c(0.954,
0.964, 0.927, 0.928, 0.928, 0.959, 0.911, 0.912, 0.838, 0.798,
0.965, 0.956)), class = c("tbl_df", "tbl", "data.frame", "sqp"
), row.names = c(NA, 12L), .Names = c("question", "quality",
# Just run the above which is the sqp_data                                                                                                                                              "reliability", "validity"))
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
sqpr:::estimate_cmv(less_sqp)
# by hand
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
sqp_data <- structure(list(question = c("ppltrst", "polintr", "psppsgv",
"stfhlth", "trstplt", "trstprt"), quality = c(0.703, 0.601, 0.709,
), reliability = c(0.737, 0.624, 0.766, 0.762, 0.766, 0.812,
0.964, 0.927, 0.928, 0.928, 0.959, 0.911, 0.912, 0.838, 0.798,
), row.names = c(NA, 12L), .Names = c("question", "quality",
# Just run the above which is the sqp_data                                                                                                                                              "reliability", "validity"))
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
read.csv("../sqp_analysis/SQPexport_20180219_1622.csv", sep = ";")
#### Estimating the common method variance by hand ####
library(tidyverse)
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("SQPexport_20171230_2255.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
sqp_data
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
sqpr:::estimate_cmv(less_sqp)
# by hand
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
#### Estimating the common method variance by hand ####
library(tidyverse)
sqp_data <-
suppressWarnings(
suppressMessages(
read_csv2("../sqp_analysis/SQPexport_20180219_1622.csv")
)) %>%
transmute(
question = tolower(`Question name`),
quality = as.numeric(`Quality (q2)`),
reliability = as.numeric(`Reliability (r2)`),
validity = as.numeric(`Validity (v2)`)
) %>%
structure(class = c(class(.), "sqp"))
less_sqp <- subset(sqp_data, question %in% c("stflife", "stfeco"))
sqpr:::estimate_cmv(less_sqp)
# by hand
prod(sqrt(less_sqp$reliability) * sqrt(1 - less_sqp$validity))
stand.dev <- c(2.59131, 2.235977, 2.166643)
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
(my <- sqrt(1 - vy^2))
qy2 <- c(0.770, 0.805, 0.767)
w <- c(1, 1, 1)
(q_coef <- sqpr:::qcoef_observed(qy2, stand.dev))
# Generate all possible variable combinations
comb <- utils::combn(seq_along(stand.dev), 2, simplify = FALSE)
(cov_e <- sqpr:::cov_both(comb, stand.dev, ry, my))
(weights_by_qcoef <- sum(w^2 * q_coef))
(intm <- sum(sqpr:::combn_multiplication(comb, w, cov_e)) * 2)
(var_ecs <- weights_by_qcoef + intm)
(var_composite <- 38.53979)
# Final quality score
(1 - (var_ecs / var_composite))
devtools::test()
qcoef_observed()
qcoef_observed
devtools::test()
devtools::test()
devtools::test()
devtools::test()
selected_vars <- c("trstprl", "trstplt", "trstprt")
the_data <- ess::ess_country("Spain", 7, "cimentadaj@gmail.com")[selected_vars]
the_data <-  purrr::map_dfc(the_data, ~ {.x[.x > 10] <- NA; .x})
# # Quality estimates
quality <-
structure(list(question = c("ppltrst", "polintr", "psppsgv",
"psppipl", "ptcpplt", "stflife", "stfeco", "stfedu", "stfhlth",
"trstprl", "trstplt", "trstprt"), reliability = c(0.729, 0.659,
0.761, 0.757, 0.758, 0.716, 0.823, 0.729, 0.762, 0.815, 0.826,
0.854), validity = c(0.951, 0.964, 0.933, 0.932, 0.932, 0.899,
0.903, 0.827, 0.863, 0.944, 0.975, 0.898), quality = c(0.693,
0.636, 0.71, 0.705, 0.707, 0.644, 0.743, 0.602, 0.658, 0.77,
0.805, 0.767), r_coef = c(0.854, 0.812, 0.872, 0.87, 0.871, 0.846,
0.907, 0.854, 0.873, 0.903, 0.909, 0.924), v_coef = c(0.975,
0.982, 0.966, 0.965, 0.965, 0.948, 0.95, 0.909, 0.929, 0.972,
0.987, 0.948), q_coef = c(0.833, 0.797, 0.843, 0.84, 0.841, 0.803,
0.862, 0.776, 0.811, 0.877, 0.897, 0.876)), .Names = c("question",
"reliability", "validity", "quality", "r_coef", "v_coef", "q_coef"
), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA,
-12L))
wt
sqp_data
quality
sqp_data <- quality
the_data
if (is.null(wt)) wt <- rep(1, length(the_data))
wt <- NULL
if (is.null(wt)) wt <- rep(1, length(the_data))
is_numeric <- is.numeric(wt)
is_na <- anyNA(wt)
correct_length <- length(wt) == ncol(the_data)
if (!is_numeric | is_na | !correct_length) {
stop("`wt` must be a non-NA numeric vector with the same length as the number of variables")
}
qy2 <- sqp_data[[top_env$sqp_columns[1]]]
# By squaring this you actually get the reliability
# coefficient.
ry <- sqrt(sqp_data[[top_env$sqp_columns[2]]])
vy <- sqrt(sqp_data[[top_env$sqp_columns[3]]])
# Method effect
method_e <- sqrt(1 - vy^2)
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
q_coef <- qcoef_observed(qy2) # std_data)
q_coef
sqp_data <- sqp_data %>% filter()
sqp_data <- sqp_data
sqp_data
sqp_data %>% filter(question %in% c("trstprl", "trstplt", "trstprt"))
sqp_data %>% filter(question %in% c("trstprl", "trstplt", "trstprt"))
sqp_data
sqp_data$question
sqp_data$question %in% "ppltrst"
sqp_data %>% dplyr::filter(question %in% c("trstprl", "trstplt", "trstprt"))
sqp_data <- sqp_data %>% dplyr::filter(question %in% c("trstprl", "trstplt", "trstprt"))
qy2 <- sqp_data[[top_env$sqp_columns[1]]]
# By squaring this you actually get the reliability
# coefficient.
ry <- sqrt(sqp_data[[top_env$sqp_columns[2]]])
vy <- sqrt(sqp_data[[top_env$sqp_columns[3]]])
# Method effect
method_e <- sqrt(1 - vy^2)
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
q_coef <- qcoef_observed(qy2) # std_data)
q_coef
method_e
stand.dev <- c(2.59131, 2.235977, 2.166643)
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
(my <- sqrt(1 - vy^2))
qy2 <- c(0.770, 0.805, 0.767)
w <- c(1, 1, 1)
sqp_data <- tibble(
reliability = ry,
validity = vy,
quality = qy2
)
sqp_data
sqp_data <- tibble(
question = c("trstprl", "trstplt", "trstprt"),
reliability = ry,
validity = vy,
quality = qy2
)
sqp_data
qy2 <- sqp_data[[top_env$sqp_columns[1]]]
qy2
# By squaring this you actually get the reliability
# coefficient.
ry <- sqrt(sqp_data[[top_env$sqp_columns[2]]])
vy <- sqrt(sqp_data[[top_env$sqp_columns[3]]])
# Method effect
method_e <- sqrt(1 - vy^2)
method_e
ry <- c(0.9027735, 0.9088454, 0.9241212)
vy <- c(0.9715966, 0.9874209, 0.9476286)
qy2 <- c(0.770, 0.805, 0.767)
# Method effect
method_e <- sqrt(1 - vy^2)
method_e
# This is the 'quality coefficient obtained by SQP
# for the observed variable i. (1-qi2)var(yi)
q_coef <- qcoef_observed(qy2) # std_data)
q_coef
weights_by_qcoef <- sum(wt^2 * q_coef)
weights_by_qcoef
# Here you create
# all combinations
comb <- utils::combn(seq_along(the_data), 2, simplify = FALSE)
# This the multiplication of all variable combinations
# using ri * mi * mj * rj * si * sj
# It's better not to use this in isolation but call
# estimate_sscore as a whole.
cov_e <- cov_both(comb, ry, method_e)
# For an explanation of this see combn_multiplication
cov_both <- function(combinations, r_coef, method_e) {
# This formula is not complicated. It's simply the product of
# the standard deviation of the data, the r_coef and the
# method effect between all combination of questions.
cov_formula <- function(one, two, r_coef, method_e) {
(r_coef[one] * method_e[one]) *
(r_coef[two] * method_e[two])
}
# Here I apply the formula to all combinations. combinations
# must be a list where each slot is of length 2 with a pair
# combination. The whole list must contain all combinations
result <- purrr::map_dbl(combinations, function(index) {
index_one <- index[1]
index_two <- index[2]
result <- purrr::map2_dbl(index_one, index_two, cov_formula,
r_coef, method_e)
result
})
result
}
# This the multiplication of all variable combinations
# using ri * mi * mj * rj * si * sj
# It's better not to use this in isolation but call
# estimate_sscore as a whole.
cov_e <- cov_both(comb, ry, method_e)
cov_e
# you need to calculate the product of a combination
# of the weights by the covariance of errors.
intm <- sum(combn_multiplication(comb, wt, cov_e)) * 2
intm
var_ecs <- weights_by_qcoef + intm
var_ecs
var_composite <- 38.53979
1 - (var_ecs / var_composite)
devtools::test()
devtools::test()
