# are added, always returns the first one
# in order
row_to_pick <-
ifelse(any(json_data$authorized), which(json_data$authorized), 1)
all_columns = TRUE
if (all_columns) {
final_df <- tibble::as_tibble(json_data)[row_to_pick, ]
} else {
r_data <- tibble::as_tibble(json_data)[row_to_pick, sqp_env$estimate_variables]
final_df <- purrr::set_names(r_data, sqp_env$sqp_columns)
}
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
final_df <- tibble::as_tibble(json_data)[row_to_pick, ]
purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
if (all_columns) {
final_df <- tibble::as_tibble(json_data)[row_to_pick, ]
purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
} else {
r_data <- tibble::as_tibble(json_data)[row_to_pick, sqp_env$estimate_variables]
final_df <- purrr::set_names(r_data, sqp_env$sqp_columns)
}
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
json_data
# Wrapper to grab the data from the requests
object_request <- function(path, estimates = FALSE) {
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
if (estimates) {
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
} else {
json_data <- jsonlite::fromJSON(get_content)$data
}
final_df <- tibble::as_tibble(json_data)
final_df
}
object_request(url_id)
url_id
object_request(url_id)
jsonlite::fromJSON(get_content, flatten = TRUE)
jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
final_df <- tibble::as_tibble(json_data)
final_df
object_request(url_id, estimates = TRUE)
json_data <- object_request(url_id, estimates = TRUE)
valid <- !is.na(json_data$authorized)
# replace this question with the short name of the question when
# available!
if (!any(valid)) stop("No valid predictions for this question")
json_data <- json_data[valid, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <-
ifelse(any(json_data$authorized), which(json_data$authorized), 1)
raw_data_data <- object_request(url_id, estimates = TRUE)
valid <- !is.na(raw_data$authorized)
raw_data <- object_request(url_id, estimates = TRUE)
valid <- !is.na(raw_data$authorized)
# replace this question with the short name of the question when
# available!
if (!any(valid)) stop("No valid predictions for this question")
raw_data <- raw_data[valid, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <-
ifelse(any(raw_data$authorized), which(raw_data$authorized), 1)
all_columns = TRUE
if (all_columns) {
final_df <- raw_data[row_to_pick, ]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
} else {
r_data <- raw_data[row_to_pick, sqp_env$estimate_variables]
final_df <- purrr::set_names(r_data, sqp_env$sqp_columns)
}
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "parsed"
)
q_name <- tolower(almost_q_name[[1]]$short_name)
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
grab_question_name <- function(id) {
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "parsed"
)
q_name <- tolower(almost_q_name[[1]]$short_name)
}
q_name <- grab_question_name(id)
q_name
stop("No valid predictions for", "`", q_name,"`")
stop("No valid predictions for", " `", q_name,"`")
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
raw_data[row_to_pick, if (!all_columns) sqp_env$estimate_variables]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
raw_data
!all_columns
raw_data[row_to_pick, NULL]
cols
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
cols_to_pick
raw_data[row_to_pick, cols_to_pick]
final_df <- raw_data[row_to_pick, cols_to_pick]
purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
all_columns = FALSE
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
?content
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "raw"
)
almost_q_name
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
tolower(jsonlite::fromJSON(almost_q_name)[[1]]$short_name)
jsonlite::fromJSON(almost_q_name)
tolower(jsonlite::fromJSON(almost_q_name)$short_name)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
grab_question_name <- function(id) {
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
}
id <- 1
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
valid_rows <- !is.na(raw_data$authorized)
q_name <- grab_question_name(id)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::load_all(".")
devtools::load_all(".")
library(magrittr)
library(tidyverse)
sqp_login("oriol.marti@gmail.com", "omarti0920")
find_studies('')
id <-
find_questions(1, "ppltrst") %>%
filter(country_iso == "ES",
language_iso == "spa") %$%
id
id <- 1
id <- 4
get_estimates <- function(id, all_columns = TRUE) {
q_name <- grab_question_name(id)
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
}
grab_question_name <- function(id) {
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
}
get_estimates <- function(id, all_columns = FALSE) {
q_name <- grab_question_name(id)
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = q_name, .before = 1)
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
}
grab_question_name <- function(id) {
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
}
get_estimates(1)
get_estimates(2)
get_estimates(3)
map(1:10, get_estimates)
get_estimates(1:2)
paste0(1, collapse = "|")
id <- 1:2
stopifnot(is.numeric(id))
id <- paste0(id, collapse = "|")
id
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
paste0(sqp_env$questions, id)
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
id
id <- 1:2
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
q_name
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
url_id
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
url_id
path <- url_id
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
jsonlite::fromJSON(get_content, flatten = TRUE)
# Wrapper to grab the data from the requests
# If estimates is TRUE returns a list, otherwise
# a tibble
object_request <- function(path, estimates = FALSE) {
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
if (estimates) {
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
return(json_data)
} else {
json_data <- jsonlite::fromJSON(get_content)$data
}
final_df <- tibble::as_tibble(json_data)
final_df
}
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
# Wrapper to grab the data from the requests
# If estimates is TRUE returns a list, otherwise
# a tibble
object_request <- function(path, estimates = FALSE) {
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
if (estimates) {
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data[[1]]
return(json_data)
} else {
json_data <- jsonlite::fromJSON(get_content)$data
}
final_df <- tibble::as_tibble(json_data)
final_df
}
id
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
url_id
# Wrapper to grab the data from the requests
# If estimates is TRUE returns a list, otherwise
# a tibble
object_request <- function(path, estimates = FALSE) {
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
if (estimates) {
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data
return(json_data)
} else {
json_data <- jsonlite::fromJSON(get_content)$data
}
final_df <- tibble::as_tibble(json_data)
final_df
}
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
make_estimate_df <- function(raw_data, var_name) {
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
Map(make_estimate_df, raw_data, q_name)
make_estimate_df <- function(raw_data, var_name, all_columns = FALSE) {
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
make_estimate_df <- function(raw_data, var_name, all_columns = FALSE) {
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
raw_data
q_name
Map(make_estimate_df, raw_data, q_name all_columns)
Map(make_estimate_df, raw_data, q_name, all_columns)
all_columns = FALSE
Map(make_estimate_df, raw_data, q_name, all_columns)
Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
Map(make_estimate_df, raw_data, q_name, all_columns = FALSE)
Map(make_estimate_df, raw_data, q_name, all_columns = TRUE)
do.call(rbind, list_data)
list_data <- Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
do.call(rbind, list_data)
list_data <- Map(make_estimate_df, raw_data, q_name, all_columns = TRUE)
do.call(rbind, list_data)
list_data <- Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
tibble::as_tibble(do.call(rbind, list_data))
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
get_estimates <- function(id, all_columns = FALSE) {
stopifnot(is.numeric(id))
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
list_data <- Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
}
devtools::load_all(".")
library(magrittr)
library(tidyverse)
sqp_login("oriol.marti@gmail.com", "omarti0920")
id <- 1
id <- 4
get_estimates(1)
get_estimates <- function(id, all_columns = FALSE) {
stopifnot(is.numeric(id))
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
list_data <- Map(make_estimate_df, raw_data, q_name, all_columns = all_columns)
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- structure(final_df, class = c(class(final_df), "sqp"))
final_df
}
grab_question_name <- function(id) {
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
}
make_estimate_df <- function(raw_data, var_name, all_columns = FALSE) {
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", q_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
get_estimates(1)
get_estimates(1:2)
get_estimates(c(1, 4, 5))
sample(1:10, 5)
get_estimates(sample(1:100, 5))
get_estimates(sample(1:100, 5))
get_estimates(sample(1:100, 5))
id <- sample(1:100, 5)
stopifnot(is.numeric(id))
id <- paste0(id, collapse = ",")
id
q_name <- grab_question_name(id)
q_name
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
length(raw_data)
length(q_name)
url_id
id <- sample(1:100, 5)
id
get_estimates(id)
stopifnot(is.numeric(id))
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
q_name
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
url_id
path <- url_id
estimates = TRUE
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
json_data <- jsonlite::fromJSON(get_content, flatten = TRUE)$data
json_data
get_estimates(1)
get_estimates(5)
get_estimates(10)
get_estimates(1020)
get_estimates(20)
id <- sample(1:100, 5)
get_estimates(20)
get_estimates(id)
id
get_estimates(82)
get_estimates(5)
get_estimates(5, TRUE)
names(get_estimates(5, TRUE))
cat(names(get_estimates(5, TRUE)))
cat(names(get_estimates(5, TRUE)), sep = ",")
dput(names(get_estimates(5, TRUE)))
sqp_env$short_estimate_variables <- paste0("prediction.", c("reliability", "validity", "quality"))
sqp_env$all_estimate_variables <- c("question", "id", "question_id", "created", "routing_id", "authorized",
"complete", "error", "errorMessage", "reliability", "validity",
"quality", "reliabilityCoefficient", "validityCoefficient", "methodEffectCoefficient",
"qualityCoefficient", "reliabilityCoefficientInterquartileRange",
"validityCoefficientInterquartileRange", "qualityCoefficientInterquartileRange",
"reliabilityCoefficientStdError", "validityCoefficientStdError",
"qualityCoefficientStdError")
sqp_env$all_estimate_variables <- c("question", "id", "question_id", "created", "routing_id", "authorized",
"complete", "error", "errorMessage", "reliability", "validity",
"quality", "reliabilityCoefficient", "validityCoefficient", "methodEffectCoefficient",
"qualityCoefficient", "reliabilityCoefficientInterquartileRange",
"validityCoefficientInterquartileRange", "qualityCoefficientInterquartileRange",
"reliabilityCoefficientStdError", "validityCoefficientStdError",
"qualityCoefficientStdError")
id
stopifnot(is.numeric(id))
id <- paste0(id, collapse = ",")
q_name <- grab_question_name(id)
q_name
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
url_id
path <- url_id
requested <- safe_GET(path)
requested
get_content <- httr::content(requested, as = 'text')
jsonlite::fromJSON(get_content, flatten = TRUE)
jsonlite::fromJSON(get_content)
q_name <- grab_question_name(id)
url_id <- paste0(sqp_env$questions, id, sqp_env$q_estimates)
raw_data <- object_request(url_id, estimates = TRUE)
q_name
raw_data
url_id
id <- c(95,30,74,36,82)
get_estimates(id)
