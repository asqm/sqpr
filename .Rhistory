cor(matrix(rnorm(100, sd = 50), nrow = 20))
cmv_tib <- sqp_cmv(corr_matrix, sqp_df, V4, V5)
corr_matrix
as_tibble(corr_matrix)
as_tibble(corr_matrix, rownames = "rowname")
as_tibble(corr_matrix)
class(corr_matrix)
as_tibble(corr_matrix)
?as_tibble()
as_tibble(corr_matrix, rownames = "rownames")
as_tibble(corr_matrix, rownames = "rownames")
mtcars
cor(mtcars)
as_tibble(cor(mtcars), rownames = "key")
cor(matrix(rnorm(100, sd = 50), nrow = 20))
dim(cor(matrix(rnorm(100, sd = 50), nrow = 20)))
as.data.frame(cor(matrix(rnorm(100, sd = 50), nrow = 20)))
as_tibble(as.data.frame(cor(matrix(rnorm(100, sd = 50), nrow = 20))))
as_tibble(as.data.frame(cor(matrix(rnorm(100, sd = 50), nrow = 20))), rownames = "key")
head(iris)
iris %>% select(-Species)
iris %>% dplyr::select(-Species)
iris %>% dplyr::select(-Species) %>% cor()
iris %>% dplyr::select(-Species) %>% cor() %>% class()
matrix(rnorm(100, sd = 50), nrow = 20)
cor_m <- matrix(rnorm(100, sd = 50), nrow = 20)
cor(cor_m)
install.packages("tibble")
cor_m <- matrix(rnorm(100, sd = 50), nrow = 20)
# No rownames nor column names
(final_cor <- cor(cor_m))
as_tibble(final_cor)
library(tibble)
as_tibble(final_cor)
as_tibble(final_cor, rownames = "hey")
as_tibble(final_cor)
reprex::reprex({
library(tibble)
cor_m <- matrix(rnorm(100, sd = 50), nrow = 20)
# No rownames nor column names
(final_cor <- cor(cor_m))
as_tibble(final_cor)
# just fine
as_tibble(final_cor, rownames = "rowname")
})
cor_m <- matrix(rnorm(100, sd = 50), nrow = 20)
(final_cor <- cor(cor_m))
attr(final_cor)
attributes(final_cor)
attributes(cor(mtcars))
row.names(cor(mtcars))
rownames(final_cor)
final_cor
as_tibble(final_cor)
final_cor
x <- final_cor
tibble::add_column(tibble::as_tibble(x),
paste0("V", nrow(x)),
before = 1)
?add_column
tibble::add_column(tibble::as_tibble(x),
rowname = paste0("V", seq_len(nrow(x))),
before = 1)
tibble::add_column(tibble::as_tibble(x),
rowname = paste0("V", seq_len(nrow(x))),
.before = 1)
x <- tibble::add_column(tibble::as_tibble(x),
rowname = paste0("V", seq_len(nrow(x))),
.before = 1)
x
x <- tibble::as_tibble(x, rownames = "rowname")
x
corr_matrix
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_matrix
as.data.frame(corr_matrix)
corr_df <-
as.data.frame(corr_matrix)
cmv_df <- sqp_cmv(corr_df, sqp_df, V4, V5)
correct_format(cmv_df)
devtools::test()
seq_len(5)
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
x <- corr_matrix
if (!(is.data.frame(x) | is.matrix(x))) {
stop("`x` must be a correlation data frame or matrix")
}
if (length(cmv_vars) < 2) {
stop("You need to supply at least two variables to calculate the Common Method Variance",
call. = FALSE)
}
sqp_data <- sqp_reconstruct(sqp_data, c("reliability", "validity"))
is.matrix(x) | is.data.frame(x)
is.null(rownames(x))
tibble::as_tibble(x)
tibble::add_column(tibble::as_tibble(x),
rowname = paste0("V", seq_len(nrow(x))),
.before = 1)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_df <-
as.data.frame(corr_matrix)
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
library(sqp)
library(sqpr)
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
correct_format <- function(p) {
expect_is(p, "data.frame")
# First column is the row names
expect_is(p[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(p[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", p[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(p), ncol(p) - 1)
invisible(TRUE)
}
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
cmv_matr <- sqp_cmv(corr_matrix, sqp_df, V4, V5)
cmv_matr
correct_format(cmv_matr)
cmv_df <- sqp_cmv(corr_df, sqp_df, V4, V5)
corr_df
rownames(corr_df)
corr_df
as_tibble(corr_df)
as_tibble(corr_df, rowname = "rowname")
mtcars
sqp_correlate(mtcars, 1)
as_tibble(sqp_correlate(mtcars, 1))
as_tibble(sqp_correlate(mtcars, 1), rowname = "rowname")
has_rownames(corr_matrix)
has_rownames(corr_df)
corr_df
tibble::has_rownames
.row_names_info(corr_df)
?.row_names_info
.row_names_info > 0L
.row_names_info(mtcars)
.row_names_info(mtcars) > 0L
devtools::test()
library(sqpr)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_df <-
as.data.frame(corr_matrix)
corr_df
has_rownames(corr_df)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
correct_format <- function(p) {
expect_is(p, "data.frame")
# First column is the row names
expect_is(p[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(p[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", p[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(p), ncol(p) - 1)
invisible(TRUE)
}
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
corr_df
corr_matrix
names(corr_matrix)
as_tibble(corr_matrix)
x <- as_tibble(corr_matrix)
has_rownames(x)
devtools::test()
devtools::test()
library(sqpr)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_df <-
as.data.frame(corr_matrix)
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
correct_format <- function(p) {
expect_is(p, "data.frame")
# First column is the row names
expect_is(p[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(p[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", p[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(p), ncol(p) - 1)
invisible(TRUE)
}
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
corr_tibble
as_tibble(corr_tibble)
x <- as_tibble(corr_tibble)
!tibble::has_rownames(x)
x <- corr_matrix
x <- as_tibble(x)
x
has_rowname_col <- "rowname" %in% names(x)
!tibble::has_rownames(x) & !has_rowname_col
x <- tibble::add_column(x,
rowname = paste0("V", seq_len(nrow(x))),
.before = 1)
x
x <- corr_df
x <- as_tibble(x)
has_rowname_col <- "rowname" %in% names(x)
x
!tibble::has_rownames(x) & !has_rowname_col
context("test-sqp_cmv.R")
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_df <-
as.data.frame(corr_matrix)
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
correct_format <- function(p) {
expect_is(p, "data.frame")
# First column is the row names
expect_is(p[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(p[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", p[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(p), ncol(p) - 1)
invisible(TRUE)
}
library(sqpr)
devtools::load_all()
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
library(testhat)
library(testthat)
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
corr_matrix <-
cor(matrix(rnorm(100, sd = 50), nrow = 20))
corr_df <-
as.data.frame(corr_matrix)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
correct_format(cmv_tib)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
test_that("`x` argument works fine with matrix and data frames", {
cmv_matr <- sqp_cmv(corr_matrix, sqp_df, V4, V5)
correct_format(cmv_matr)
cmv_df <- sqp_cmv(corr_df, sqp_df, V4, V5)
correct_format(cmv_df)
})
devtools::test
devtools::test()
cmv_matr <- sqp_cmv(corr_matrix, sqp_df, V4, V5)
corr_matrix
corr_df
cor(mtcars)
cor(matrix(rnorm(100, sd = 50), nrow = 20))
setNames(cor(matrix(rnorm(100, sd = 50), nrow = 20)),
paste0("V", seq_len(5)))
cor(matrix(rnorm(100, sd = 50), nrow = 20))
matrix(rnorm(10), 5, 5)
matr_nothing <- matrix(rnorm(10, sd = 50), 5, 5)
cmv_matr <- sqp_cmv(matr_nothing, sqp_df, V4, V5)
correct_format(cmv_matr)
?matrix
matr_col <- matrix(rnorm(10, sd = 50), 5, 5,
list(paste("V", seq_len(5))))
matr_col <- matrix(rnorm(10, sd = 50), 5, 5,
dimnames = list(paste("V", seq_len(5))))
matr_col
matr_col <- matrix(rnorm(10, sd = 50), 5, 5,
dimnames = list(paste0("V", seq_len(5))))
matr_row <- matrix(rnorm(10, sd = 50), 5, 5,
dimnames = list(paste0("V", seq_len(5))))
cmv_matr <- sqp_cmv(matr_row, sqp_df, V4, V5)
correct_format(cmv_matr)
cmv_matr
replicate(paste0("V", seq_len(5)))
replicate(2, paste0("V", seq_len(5)))
replicate(2, paste0("V", seq_len(5)), simplify = FALSE)
matr_both <- matrix(rnorm(10, sd = 50), 5, 5,
dimnames = list(paste0("V", seq_len(5)),
paste0("V", seq_len(5))))
# Matrix row and col names
cmv_matr <- sqp_cmv(matr_both, sqp_df, V4, V5)
correct_format(cmv_matr)
matr_row <- matrix(rnorm(10, sd = 50), 5, 5,
dimnames = list(NULL, paste0("V", seq_len(5))))
matr_row
random_vec <- rnorm(10, sd = 50)
# Matrix col names
cmv_matr <- sqp_cmv(matr_col, sqp_df, V4, V5)
correct_format(cmv_matr)
devtools::test()
random_vec <- rnorm(10, sd = 50)
df_nothing <- matrix(random_vec, 5, 5)
df_nothing
df_nothing <- as.data.frame(matrix(random_vec, 5, 5))
df_nothing
dimnames(df_nothing)
has_rownames(df_nothing)
has_names(df_nothing)
has_names(df_nothing)
df
df_nothing
# Matrix no row or col names
cmv_matr <- sqp_cmv(df_nothing, sqp_df, V4, V5)
correct_format(cmv_matr)
devtools::test()
# Matrix no row or col names
cmv_matr <- sqp_cmv(matr_nothing, sqp_df, V4, V5)
cmv_matr
cmv_matr[[1]]
devtools::test()
df_nothing <- as.data.frame(matrix(random_vec, 5, 5))
df_nothing
rownames(df_no_rows) <- paste0("V", seq_len(5))
df_no_rows <- as.data.frame(matrix(random_vec, 5, 5))
rownames(df_no_rows) <- paste0("V", seq_len(5))
df_no_rows
df_rows <- df_no_rows
devtools::test()
devtools::test()
random_vec <- rnorm(10, sd = 50)
df_no_rows <- as.data.frame(matrix(random_vec, 5, 5))
df_no_rows
# df no row names
cmv_matr <- sqp_cmv(df_no_rows, sqp_df, V4, V5)
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
correct_format <- function(p) {
expect_is(p, "data.frame")
expect_equal(names(p)[[1]], "rowname")
# First column is the row names
expect_is(p[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(p[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", p[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(p), ncol(p) - 1)
invisible(TRUE)
}
random_vec <- rnorm(10, sd = 50)
df_no_rows <- as.data.frame(matrix(random_vec, 5, 5))
# df no row names
cmv_matr <- sqp_cmv(df_no_rows, sqp_df, V4, V5)
correct_format(cmv_matr)
rownames(df_no_rows) <- paste0("V", seq_len(5))
df_rows <- df_no_rows
df_rows
# df row names
cmv_matr <- sqp_cmv(df_rows, sqp_df, V4, V5)
df_rows
x <- df_rows
x <- matrix2tibble(x)
x
x <- df_rows
if (has_name(x, "rowname") && tibble::is_tibble(x)) return(x)
x
x <- as_tibble(x)
has_rowname_col <- "rowname" %in% names(x)
x
has_rowname_col
has_name
tibble::as_tibb
tibble::as_tibble()
?tibble::as_tibble()
x
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
?sqp_cmv
devtools::document()
