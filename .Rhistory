get_content <- httr::content(requested, as = 'text')
final_df <- tibble::as_tibble(jsonlite::fromJSON(get_content)$data)
final_df
}
# Get all studies
get_studies <- function() {
final_df <- object_request(sqp_env$study)
final_df[sqp_env$study_variables]
}
# Find studies by name
find_studies <- function(question_name) {
studies <- get_studies()
studies_names <- studies[[sqp_env$study_variables[2]]]
sel_rows <- grepl(question_name, studies_names, ignore.case = TRUE)
studies[sel_rows, ]
}
# get questions by study
get_questions <- function(id_study) {
check_study(id_study)
q_studies_path <- paste0(sqp_env$study, "/", id_study, sqp_env$questions)
final_df <- object_request(q_studies_path)
final_df[sqp_env$question_variables]
}
# find questions by name in study
find_questions <- function(id_study, question_name) {
questions_df <- get_questions(id_study)
all_questions <- questions_df[[sqp_env$question_variables[3]]]
sel_rows <- grepl(question_name, all_questions, ignore.case = TRUE)
questions_df[sel_rows, ]
}
sqp_login("hey", "ho")
sqp_login("oriol.marti@gmail.com", "omarti0920")
get_questions(1)
memo_GET <- memoise::memoise(httr::GET)
memo_GET()
memo_GET(
memo_GET
memo_GET <- memoise::memoise(httr::GET)
auth_GET <- function(path, ...) {
check_login()
auth <- httr::add_headers('Authorization' = paste("Bearer", sqp_env$token))
res <-
memo_GET(url = sqp_env$hostname,
path = path,
config = auth,
...)
res
}
safe_GET <- function(path, ...) {
res <- auth_GET(path, ...)
catch_error(res)
res
}
object_request <- function(path) {
requested <- safe_GET(path)
get_content <- httr::content(requested, as = 'text')
final_df <- tibble::as_tibble(jsonlite::fromJSON(get_content)$data)
final_df
}
# Get all studies
get_studies <- function() {
final_df <- object_request(sqp_env$study)
final_df[sqp_env$study_variables]
}
# Find studies by name
find_studies <- function(question_name) {
studies <- get_studies()
studies_names <- studies[[sqp_env$study_variables[2]]]
sel_rows <- grepl(question_name, studies_names, ignore.case = TRUE)
studies[sel_rows, ]
}
# get questions by study
get_questions <- function(id_study) {
check_study(id_study)
q_studies_path <- paste0(sqp_env$study, "/", id_study, sqp_env$questions)
final_df <- object_request(q_studies_path)
final_df[sqp_env$question_variables]
}
# find questions by name in study
find_questions <- function(id_study, question_name) {
questions_df <- get_questions(id_study)
all_questions <- questions_df[[sqp_env$question_variables[3]]]
sel_rows <- grepl(question_name, all_questions, ignore.case = TRUE)
questions_df[sel_rows, ]
}
sqp_login("hey", "ho")
sqp_login("oriol.marti@gmail.com", "omarti0920")
get_studies()
get_questions(1)
get_questions(1)
get_questions(1)
find_questions(1, "tvtot")
find_questions(1, "tvpol")
options()
options(SQP_USER = 'john',
SQP_PW = 'secret')
options()
options()$SQP_PW
devtools::document()
devtools::document()
usethis::use_package("httr")
?sqp_login
devtools::document()
?sqp_login
devtools::document()
?Sys.setenv
devtools::document()
?sqp_construct
devtools::document()
?sqp_login
devtools::document()
devtools::document()
#' of the study.
#' @export
#'
#' @examples
#'
#' # Set your login information here. See ?sqp_login
#'
#' find_studies("tvtot")
#'
#'
find_studies <- function(study) {
studies <- get_studies()
studies_names <- studies[[sqp_env$study_variables[2]]]
sel_rows <- grepl(study, studies_names, ignore.case = TRUE)
studies[sel_rows, ]
}
#' @rdname find_studies
get_studies <- function() {
final_df <- object_request(sqp_env$study)
final_df[sqp_env$study_variables]
}
devtools::load_all()
options(SQP_USER = 'cimentadaj', SQP_PW = 'Lolasouno2')
sqp_login()
options(SQP_USER = "oriol.marti@gmail.com", SQP_PW = "omarti0920")
sqp_login()
find_studies(10)
find_studies(10)
find_studies(1)
find_studies(2)
#'
#' @examples
#'
#' # Set your login information here. See ?sqp_login
#'
#' find_studies("ess")
#'
#' #' find_studies("australia")
#'
#'
find_studies <- function(study) {
stopifnot(is.character(study))
studies <- get_studies()
studies_names <- studies[[sqp_env$study_variables[2]]]
sel_rows <- grepl(study, studies_names, ignore.case = TRUE)
studies[sel_rows, ]
}
find_studies(2)
find_studies("ess")
find_studies("australia")
find_studies(2)
devtools::document()
?find_studies
?get_studies
usethis::use_test('studies')
library(testthat)
sqp_login("oriol.marti@gmail.com", "omarti0920")
all_studies <- get_studies()
all_studies
expect_is(all_studies, tibble::is_tibble)
?expect_is
expect_is(all_studies, "tbl_df")
all_studies
expect_equal(ncol(all_studies), length(sqp_env$study_variables))
all_studies
find_studies("")
find_studies("")
expenct_identical(find_studies(""), get_studies())
expect_identical(find_studies(""), get_studies())
find_studies(character())
expect_error(find_studies(character()))
find_studies(1)
expect_error(find_studies(1), "is.character(study) is not TRUE")
expect_error(find_studies(1), "is.character(study) is not TRUE ")
expect_error(find_studies(1),
"is.character(study) is not TRUE")
expect_error(find_studies(1))
usethis::use_package
?usethis::use_package
usethis::use_package("memoise")
find_studies("ess")
get_questions(1)
?find_studies()
get_questions(1, "tvtot")
find_questions(1, "tvtot")
find_questions(1, "tvpol")
library(tidyverse)
library(dplyr)
get_questions()
get_questions(1)
get_questions(1) %>%
arrange(-short_name)
et_questions(1) %>%
arrange(desc(short_name))
get_questions(1) %>%
arrange(desc(short_name))
get_questions(1) %>%
filter(country_iso = "ES")
get_questions(1) %>%
filter(country_iso == "ES")
get_questions(1) %>%
filter(country_iso == "ES",
language_iso == "spa")
get_questions(1) %>%
filter(country_iso == "ES",
language_iso == "spa",
grepl("tot"))
get_questions(1) %>%
filter(country_iso == "ES",
language_iso == "spa",
grepl("tot", .$short_name))
get_questions(1) %>%
filter(country_iso == "ES",
language_iso == "spa",
grepl("tot", .$short_name, ignore.case = TRUE))
devtools::document()
devtools::document()
devtools::document()
?get_questions
?get_questions
devtools::document()
devtools::document()
devtools::document()
?find_questions
?find_questions
devtools::document()
devtools::document()
?get_questions
devtools::document()
usethis::use_test('questions')
sqp_login("oriol.marti@gmail.com", "omarti0920")
get_studies()
get_questions(100)
get_questions(25)
get_questions(12)
get_questions(12)
correct_df <- get_questions(12)
expect_is(correct_df, "tbl_df")
expect_length(correct_df, 5)
get_questions(99999999)
9^9e00
get_questions(Inf)
9^9e000
9^9e000000
9^9e00
get_questions(9^9e00)
expect_error(get_questions(9^9e00),
"Study 387420489 was not found. Check get_studies() ")
expect_error(get_questions(9^9e00),
"Study 387420489 was not found. Check get_studies()")
get_questions("ess")
#' @rdname find_questions
get_questions <- function(id_study, all_columns = FALSE) {
stopifnot(is.numeric(id_study))
check_study(id_study)
q_studies_path <- paste0(sqp_env$study, "/", id_study, sqp_env$questions)
final_df <- object_request(q_studies_path)
if (all_columns) return(final_df)
final_df[sqp_env$question_variables]
}
get_questions("ess")
get_questions("ess", "is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"),
"is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"),
"is.numeric(id_study) is not TRUE ")
expect_error(get_questions("ess"),
"is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE ")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE ")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE\s")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE\\s")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE")
?expect_error
get_questions("ess")
expect_error(get_questions("ess"),
" is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"),
"is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"),
regexp = "is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"),
"is.numeric(id_study) is not TRUE", ignore.case = TRUE)
get_questions("ess")
expect_error(get_questions("ess"), "is.numeric(id_study) is not TRUE")
expect_error(get_questions("ess"), "^is.numeric(id_study) is not TRUE$")
expect_error(get_questions("ess"),
regexp = "^is.numeric(id_study) is not TRUE$")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
?get_questions
devtools::document()
find_studies(12)
numeric()
get_questions(numeric())
sqp_login("oriol.marti@gmail.com", "omarti0920")
get_questions(numeric())
#' @rdname find_questions
get_questions <- function(id_study, all_columns = FALSE) {
stopifnot(is.numeric(id_study), length(id_study != 0))
check_study(id_study)
q_studies_path <- paste0(sqp_env$study, "/", id_study, sqp_env$questions)
final_df <- object_request(q_studies_path)
if (all_columns) return(final_df)
final_df[sqp_env$question_variables]
}
get_questions(numeric())
expect_error(get_questions(numeric()),
"length(.*) is not TRUE")
expect_error(get_questions(numeric()),
"length\\(.*\\) is not TRUE")
test_that("get_studies handles unexistent studies", {
expect_error(get_questions(numeric()),
"length\\(.*\\) is not TRUE")
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
})
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
get_questions(9^9e00)
#' @rdname find_questions
get_questions <- function(id_study, all_columns = FALSE) {
stopifnot(is.numeric(id_study), length(id_study) != 0)
check_study(id_study)
q_studies_path <- paste0(sqp_env$study, "/", id_study, sqp_env$questions)
final_df <- object_request(q_studies_path)
if (all_columns) return(final_df)
final_df[sqp_env$question_variables]
}
test_that("get_studies handles unexistent studies", {
expect_error(get_questions(numeric()),
"length\\(.*\\) is not TRUE")
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
})
test_that("get_studies handles unexistent studies", {
expect_error(get_questions(numeric()),
"length\\(.*\\) != 0 is not TRUE")
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
})
find_studies(12)
find_questions(12)
#' # If that doesn't fit, then use get_questions and search for the question
#' # manually through filtering:
#'
#' library(dplyr)
#' get_questions(1) %>%
#'    filter(country_iso == "ES",
#'           language_iso == "spa",
#'           grepl("Tot", .$short_name))
#'}
#'
find_questions <- function(id_study, question_name, all_columns = FALSE) {
stopifnot(!missing(id_study), !is.missing(question_name))
questions_df <- get_questions(id_study, all_columns = all_columns)
all_questions <- questions_df[[sqp_env$question_variables[3]]]
sel_rows <- grepl(question_name, all_questions, ignore.case = TRUE)
questions_df[sel_rows, ]
}
find_questions(12)
#' # If that doesn't fit, then use get_questions and search for the question
#' # manually through filtering:
#'
#' library(dplyr)
#' get_questions(1) %>%
#'    filter(country_iso == "ES",
#'           language_iso == "spa",
#'           grepl("Tot", .$short_name))
#'}
#'
find_questions <- function(id_study, question_name, all_columns = FALSE) {
stopifnot(!missing(id_study), !missing(question_name))
questions_df <- get_questions(id_study, all_columns = all_columns)
all_questions <- questions_df[[sqp_env$question_variables[3]]]
sel_rows <- grepl(question_name, all_questions, ignore.case = TRUE)
questions_df[sel_rows, ]
}
find_questions(12)
find_questions(12)
get_questions(12, TRUE)
get_questions(12, TRUE) %>% View()
find_questions(12, "$a")
find_questions(12, "a$")
regexp <- find_questions(12, "a$")
expect_is(regexp, "tbl_df")
expect_length(regexp, length(sqp_env$question_variables))
find_questions(12, "")
find_questions(12, "", all_columns = TRUE)
expect_more_than(ncol(find_questions(12, "", all_columns = TRUE)),
length(sqp_env$question_variables))
expect_gt(ncol(find_questions(12, "", all_columns = TRUE)),
length(sqp_env$question_variables))
?find_questions
regexp <- find_questions(12, "")
expect_is(regexp, "tbl_df")
expect_length(regexp, length(sqp_env$question_variables))
nrow(regexp == 0)
expect_false(nrow(regexp == 0))
expect_false(nrow(regexp != 0))
expect_false(nrow(regexp) == 0)
devtools::document()
sqp_login("hey", "ho")
usethis::use_test()
test_that("login fails with random account", {
sqp_login("hey", "ho")
})
sqp_login("hey", "ho")
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username////password")
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username/password")
sqp_env$token <- NULL
user <- Sys.getenv("SQP_USER")
pw <- Sys.getenv("SQP_PW")
sqp_login()
expect_invisible(sqp_login())
expect_silent(sqp_login())
sqp_env$token
expect_false(sqp_env$token == "")
?Sys.getenv
sqp_env$token <- NULL
Sys.getenv("SQP_USER")
Sys.unsetenv("SQP_USER")
Sys.unsetenv("SQP_PW")
devtools::document()
?devtools::check
Sys.setenv("SQP_USER" = "oriol.marti@gmail.com")
Sys.setenv("SQP_PW" = "omarti0920")
test_that("login fails with random account", {
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username/password")
})
devtools::load_all()
library(test_that)
library(testthat)
test_that("login fails with random account", {
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username/password")
})
devtools::load_all()
test_that("login fails with random account", {
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username/password")
})
sqp_env$token <- NULL
test_that("login succeeds with environment variables", {
expect_silent(sqp_login())
expect_false(sqp_env$token == "")
})
sqp_env$token <- NULL
user <- Sys.getenv("SQP_USER")
pw <- Sys.getenv("SQP_PW")
Sys.unsetenv("SQP_USER")
Sys.unsetenv("SQP_PW")
test_that("login succeeds with variables as", {
options(SQP_USER = user, SQP_PW = pw)
expect_silent(sqp_login())
expect_false(sqp_env$token == "")
})
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
usethis::use_package("jsonlite")
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
sqp_login()
sqp_login("oriol.marti@gmail.com", "omarti0920")
test_that("get_studies returns a correct data frame", {
all_studies <- get_studies()
expect_is(all_studies, "tbl_df")
expect_equal(ncol(all_studies), length(sqp_env$study_variables))
})
library(testthat)
test_that("get_studies returns a correct data frame", {
all_studies <- get_studies()
expect_is(all_studies, "tbl_df")
expect_equal(ncol(all_studies), length(sqp_env$study_variables))
})
test_that("find_studies returns correct output", {
expect_identical(find_studies(""), get_studies())
expect_error(find_studies(character()))
expect_error(find_studies(1))
})
devtools::test()
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
devtools::check(env_vars = c("SQP_USER" = "oriol.marti@gmail.com", "SQP_PW" = "omarti0920"))
