serv = stfedu + stfhlth,
systmrsp = psppsgv + psppipl + ptcpplt)
selected_vars <- c("trstprl", "trstplt", "trstprt",
"stfedu", "stfhlth", "psppsgv",
"psppipl", "ptcpplt", "ppltrst",
"polintr", "stflife", "stfeco",
"agea","eisced")
composite_scores <- c("poltrst", "serv", "systmrsp")
all_vars <- c(composite_scores, selected_vars) # for using later
ess7es
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
all(tolower(questions$short_name) %in% selected_vars[1:12])
sqp_data <-
get_estimates(questions$id) %>%
arrange(question)
sqp_data
sqp_data %>%
sqp_sscore(df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
Quality <-
sqp_data %>%
sqp_sscore(df = ess7es, new_name = poltrst, trstprl, trstplt, trstprt) %>%
sqp_sscore(df = ess7es, new_name = serv, stfedu, stfhlth) %>%
sqp_sscore(df = ess7es, new_name = systmrsp, psppsgv, psppipl, ptcpplt)
Quality
Quality <-
Quality %>%
sqp_bind_metrics(agea, list(quality = 1)) %>%
sqp_bind_metrics(eisced, list(quality = 0.93))
Quality
variables_order <- c("poltrst",
"serv",
"systmrsp",
"ppltrst",
"polintr",
"stflife",
"stfeco",
"agea",
"eisced")
# just ordering the data, nothing fancy
Quality <- slice(Quality,match(variables_order, .$question))
slice(Quality, match(variables_order, .$question))
match(variables_order, Quality$question)
Quality[match(variables_order, Quality$question)), ]
Quality[match(variables_order, Quality$question), ]
# just ordering the data, nothing fancy
Quality <- Quality[match(variables_order, Quality$question), ]
ess7escorr <- ess7es %>% select(variables_order)
# Exploratory correlation matrix (in order of the columns in data frame):
original_corr_2 <- cor(ess7escorr, use = "complete.obs", method = "pearson")
original_corr_2
Quality
# This functions adjusts the diagonal of a correlation matrix with a quality measurement
# It accepts a matrix or a data frame with numeric variables and a numeric vector used
# as the adjustment of the diagonal. You can use the other arguments set in the
# cor() function
corr_q2 <-
sqp_correlate(x = ess7escorr,
diag_adj = Quality$quality,
use = "complete.obs",
method = "pearson")
corr_q2
sqp_cmv(x = corr_q2,
sqp_data = Quality,
stfeco, stflife)
corrr::fashion(corr_q2_cmv)
#subtract the cmv from the observed correlation
corr_q2_cmv <-
sqp_cmv(x = corr_q2,
sqp_data = Quality,
stfeco, stflife)
corrr::fashion(corr_q2_cmv)
install.packages("corrr")
corrr::fashion(corr_q2_cmv)
corr_q2_cmv
Quality %>%
filter(question %in% c("stflife", "stfeco")) %>%
sqpr:::estimate_cmv()
cmv <-
Quality %>%
filter(question %in% c("stflife", "stfeco")) %>%
sqpr:::estimate_cmv()
0.20 - cmv
0.27 - cmv
corrected_corr_2 <- corr_q2_cmv %>% select(-rowname) %>% as.matrix() %>% cov2cor()
corrected_corr_2
corrected_corr_2
summary(fit.corrected, standardized=T) #Prints in addition standardized results
fit <-
sem(model,
sample.cov=original_corr_2,
sample.nobs= 1624)
model<- "poltrst ~ ppltrst + stflife + polintr + stfeco + serv + systmrsp + agea + eisced"
# Model based on original correlation matrix
fit <-
sem(model,
sample.cov=original_corr_2,
sample.nobs= 1624)
# Model based on corrected correlation matrix
fit.corrected <-
sem(model,
sample.cov=corrected_corr,
sample.nobs= 1624)
corrected_corr <- corr_q2_cmv %>% select(-rowname) %>% as.matrix() %>% cov2cor()
corrected_corr
# Model based on corrected correlation matrix
fit.corrected <-
sem(model,
sample.cov=corrected_corr,
sample.nobs= 1624)
summary(fit.corrected, standardized=T) # Prints in addition standardized results
?inspect
source("https://bitbucket.org/!api/2.0/snippets/surveyqualityprediction/zeaezK/64ddc3d6c53ad00289a0742af25c0588e8b2c429/files/lavaan_inspect.R")
lavaan_inspect(fit)
inspect(fit, 'est')
inspect(fit, 'est')
summary(fit.corrected, standardized=T) # Prints in addition standardized results
summary(fit.corrected) # Prints in addition standardized results
inspect(fit, 'estimates')
inspect(fit, 'dx.free')
inspect(fit, 'partable')
inspect(fit, 'free')
inspect(fit, 'estimates')
summary(fit.corrected) # Prints in addition standardized results
parameterEstimates(fit.corrected)
class(parameterEstimates(fit.corrected))
parameterEstimates(fit.corrected)
parameterEstimates(fit)
map(list(fit, fit.corrected), parameterestimates)
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(rhs, est, ci.lower, ci.upper))
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
map(list(fit, fit.corrected), parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(, parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper))
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows()
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(rep(c("original", "corrected"), each = 9))
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(rep(c("original", "corrected"), each = 9))
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.2))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.3))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(xlab = "Predictions")
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(xlab = "Predictions")
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictions")
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictors", y = "Estimated coefficients") +
theme_bw()
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictors", y = "Estimated coefficients") +
theme_bw()
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
#Change of R2:
R2-R2_uncorr
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
# Change of R2:
R2 - R2_uncorr
coef(fit.corrected) / coef(fit)
coef(fit.corrected) / coef(fit)
R2_uncorr <- inspect(fit, 'r2')
R2 <- inspect(fit.corrected, 'r2')
# Change of R2:
R2 - R2_uncorr
?sqp_cmv
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::build_vignettes()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::build_vignettes()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
usethis::use_package("lavaan", "suggests")
usethis::use_package("tidyverse", "suggests")
devtools::check()
usethis::use_package_doc()
devtools::document()
??sqpr
?sqpr
devtools::document()
devtools::document()
?sqpr
devtools::document()
?sqpr
?sqpr
devtools::document()
?sqpr
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
id <- 4
stopifnot(is.numeric(id), length(id) >= 1)
collapsed_id <- paste0(id, collapse = ",")
url_id <- paste0(sqp_env$questions, collapsed_id, sqp_env$q_estimates)
all_columns = TRUE
q_name <- get_question_name(id)
raw_data <- object_request(url_id, estimates = TRUE)
raw_data
valid_rows <- !is.na(raw_data$authorized)
q_name
id
if (all(c(1, 1) == dim(raw_data))) {
sqp_data <-
sqp_construct_(var_name,
metrics = list(quality = NA_integer_), # random metric
all_columns)
# only for all columns, bc otherwise
# you the 4 column layout of sqp of
# short columns is lost
if (all_columns) sqp_data$question_id <- id
return(sqp_data)
}
var_name <- q_name
if (all(c(1, 1) == dim(raw_data))) {
sqp_data <-
sqp_construct_(var_name,
metrics = list(quality = NA_integer_), # random metric
all_columns)
# only for all columns, bc otherwise
# you the 4 column layout of sqp of
# short columns is lost
if (all_columns) sqp_data$question_id <- id
return(sqp_data)
}
var_name
id
raw_data
valid_rows <- !is.na(raw_data$authorized)
raw_data$authorized
raw_data
raw_data <- raw_data[[1]]
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", var_name,"`")
raw_data <- raw_data[valid_rows, ]
raw_data
authorized = TRUE
if (authorized) {
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
} else {
row_to_pick <- seq_along(nrow(raw_data))
}
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$short_estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
authorized = FALSE
if (authorized) {
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
} else {
row_to_pick <- seq_along(nrow(raw_data))
}
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$short_estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
raw_data
if (authorized) {
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
} else {
row_to_pick <- seq_len(nrow(raw_data))
}
cols_to_pick <- if (all_columns) names(raw_data) else sqp_env$short_estimate_variables
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
as_tibble(final_df)
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(4, all_columns = TRUE, authorized = FALSE)
sqp_data
devtools::load_all(".")
sqp_data <- get_estimates(4, all_columns = TRUE, authorized = FALSE)
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(4, all_columns = TRUE, authorized = FALSE)
sqp_data
#' get_estimates(c(1, 2, 86), all_columns = TRUE)
#'
#' # Explore variable names
#'
#' get_question_name(1)
#'
#' get_question_name(1:10)
#'
#' }
#'
get_estimates <- function(id, all_columns = FALSE, authorized = TRUE) {
stopifnot(is.numeric(id), length(id) >= 1)
collapsed_id <- paste0(id, collapse = ",")
url_id <- paste0(sqp_env$questions, collapsed_id, sqp_env$q_estimates)
q_name <- get_question_name(id)
raw_data <- object_request(url_id, estimates = TRUE)
list_data <- purrr::pmap(list(raw_data, q_name, id),
make_estimate_df,
all_columns = all_columns,
authorized = authorized)
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- sqp_reconstruct(final_df)
final_df
}
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(4, all_columns = TRUE, authorized = FALSE)
sqp_data
expect_length(sqp_data, length(sqp_env$all_estimate_variables))
expect_is(sqp_data, "sqp")
expect_true(nrow(sqp_data) > 1)
expect_true(all(sqp_env$all_estimate_variables %in% names(sqp_data)))
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
usethis::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
devtools::load_all(".")
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
sqp_login()
sqp_login()
find_studies("ess")
find_studies("ESS Round 4")
find_studies("ESS Round 4")
ess_four <- find_studies("ESS Round 4")
ess_four
find_questions(ess_four$id, "tv")
q_ess <- find_questions(ess_four$id, "tv")
q_ess
q_ess[q_ess$language_iso == "spa", ]
sp_tv <- q_ess[q_ess$language_iso == "spa", ]
sp_tv
get_estimates(sp_tv$id)
predictions <- get_estimates(sp_tv$id)
predictions
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
library(sqpr)
Sys.setenv(SQP_USER = 'annadci')
#Jorge: I can also log in with my username! :)
# I think you should mention that it is possible with
# the email or with the username
Sys.setenv(SQP_PW = 'adcisqp')
sqp_login()
find_studies("ess")
study_id <- find_studies("ESS Round 4")$id
find_questions(study_id, "tv")
tv_qs <- find_questions(study_id, "^tv")
sp_tv <- tv_qs[tv_qs$language_iso == "spa", ]
sp_tv
get_estimates(sp_tv$id)
find_studies("old")
study_id2 <- find_studies("Old 102")$id
find_questions(study_id2, "102.1.3")
get_estimates(my_q$id)
my_q <- find_questions(study_id2, "102.1.3")
get_estimates(my_q$id)
get_estimates(sp_tv$id, all_columns = TRUE)
get_estimates(sp_tv$id, all_columns = TRUE, FALSE)
get_estimates(sp_tv$id, all_columns = TRUE)
get_estimates(my_q$id, all_columns = T)
View(get_estimates(my_q$id, all_columns = T))
ess7 <- find_studies("ESS Round 7")$id
ess7q <- find_questions(ess7, "cptppol")
ess7qeng <- ess7q[ess7q$language_iso == "eng", ]
ess7qeng
get_estimates(ess7qeng$id)
get_estimates(ess7qeng$id, FALSE)
devtools::load_all(".")
get_estimates(ess7qeng$id, FALSE)
sqp_login("cimentadaj@gmail.com", "Lolasouno2")
get_estimates(ess7qeng$id, FALSE)
get_estimates(ess7qeng$id, TRUE)
get_estimates(ess7qeng$id, authorized = FALSE)
get_estimates(ess7qeng$id, TRUE, authorized = FALSE)
get_estimates(my_q$id, all_columns = T)
devtools::document()
devtools::document()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(your_email = "cimentadaj@gmail.com")
devtools::check()
