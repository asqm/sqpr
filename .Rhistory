Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
devtools::check()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE
)
library("lavaan")
library("tidyverse")
library("essurvey")
library("sqpr")
your_email <- Sys.getenv("your_email")
your_email
your_email <- Sys.getenv("ess_email")
your_email
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
your_email <- Sys.getenv("ess_email")
ess7es <-
import_country("Spain", 7, your_email) %>%
recode_missings()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = "cimentadaj")
Sys.setenv(SQP_PW = "Lolasouno2")
devtools::test()
?sqp_login
Sys.setenv(SQP_USER = "cimentadaj")
Sys.setenv(SQP_PW = "Lolasouno2")
sqp_login()
correct_df <- get_questions(12)
row_n <- 10
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n))
sqp_data
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(sample(1:1000, row_n), all_columns = TRUE)
sqp_login()
set.seed(1231)
sqp_data <- get_estimates(4, all_columns = TRUE, authorized = FALSE)
sqp_data
sqp_data <- get_estimates(86, all_columns = TRUE)
sqp_data
sqp_login()
correct_df <- get_questions(12)
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
sqp_login()
correct_df <- get_questions(12)
sqp_login()
expect_error(get_questions(numeric()),
sqp_login()
expect_error(get_questions(numeric()),
"length\\(.*\\) != 0 is not TRUE")
get_questions(numeric())
sqp_login()
expect_error(get_questions(numeric()),
"length\\(.*\\) != 0 is not TRUE")
expect_error(get_questions(9^9e00),
"Study [0-9]+ was not found. Check get_studies()")
expect_error(get_questions("ess"),
regexp = ".* is not TRUE")
get_questions("ess")
sqp_login()
regexp <- find_questions(12, "a$")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE
)
library(lavaan)
library(tidyverse)
library(essurvey)
library(sqpr)
ess7es <-
import_country("Spain", 7, your_email) %>%
recode_missings()
ess_email <- Sys.getenv("ess_email")
ess7es <-
import_country("Spain", 7, ess_email) %>%
recode_missings()
ess7es <-
ess7es %>%
mutate(poltrst = trstprl + trstplt + trstprt,
serv = stfedu + stfhlth,
systmrsp = psppsgv + psppipl + ptcpplt)
selected_vars <- c("trstprl", "trstplt", "trstprt",
"stfedu", "stfhlth", "psppsgv",
"psppipl", "ptcpplt", "ppltrst",
"polintr", "stflife", "stfeco",
"agea","eisced")
composite_scores <- c("poltrst", "serv", "systmrsp")
all_vars <- c(composite_scores, selected_vars) # for using later
ess7es
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
all(tolower(questions$short_name) %in% selected_vars[1:12])
sqp_data <-
get_estimates(questions$id) %>%
arrange(question)
sqp_data
sqp_sscore(sqp_data = sqp_data,
df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
Quality <-
sqp_data %>%
sqp_sscore(df = ess7es, new_name = poltrst, trstprl, trstplt, trstprt) %>%
sqp_sscore(df = ess7es, new_name = serv, stfedu, stfhlth) %>%
sqp_sscore(df = ess7es, new_name = systmrsp, psppsgv, psppipl, ptcpplt)
Quality
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
sqp_login("hey", "ho")
test_that("login fails with random account", {
expect_error(sqp_login("hey", "ho"),
"^Failed to login with that username/password")
})
sqp_env$token <- NULL
sqp_login()
sqp_env$token == ""
test_that("login succeeds with environment variables", {
expect_silent(sqp_login())
expect_false(sqp_env$token == "")
})
sqp_env$token <- NULL
user <- Sys.getenv("SQP_USER")
pw <- Sys.getenv("SQP_PW")
Sys.unsetenv("SQP_USER")
Sys.unsetenv("SQP_PW")
test_that("login succeeds with variables as", {
options(SQP_USER = user, SQP_PW = pw)
expect_silent(sqp_login())
expect_false(sqp_env$token == "")
})
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::test()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(sqpr)
sqp_login()
ess_four <- find_studies("ESS Round 4")
ess_four
q_ess <- find_questions(ess_four$id, "tv")
sp_tv <- q_ess[q_ess$language_iso == "spa", ]
sp_tv
predictions <- get_estimates(sp_tv$id)
predictions
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
system("open .")
rmarkdown::pandoc_version()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
cat(file = "./.Rbuildignore")
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj'); Sys.setenv(SQP_PW = 'Lolasouno2'); Sys.setenv(ess_email = "cimentadaj@gmail.com")
devtools::check()
system("open C:/Users/CIMENT~1/AppData/Local/Temp/RtmpqydcBP/sqpr.Rcheck/")
Sys.setenv(SQP_USER = 'cimentadaj@gmail.com')
Sys.setenv(SQP_PW = 'Lolasouno2')
Sys.setenv(ess_email = 'cimentadaj@gmail.com')
devtools::check()
Sys.setenv(ess_email = 'cimentadaj@gmail.com')
Sys.setenv(SQP_PW = 'Lolasouno2')
Sys.setenv(SQP_USER = 'cimentadaj@gmail.com')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
Sys.setenv(SQP_USER = 'cimentadaj@gmail.com'); Sys.setenv("SQP_PW" = "Lolasouno2"); Sys.setenv("ess_email" = "cimentadaj@gmail.com")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE
)
library(lavaan)
library(tidyverse)
library(essurvey)
library(sqpr)
ess_email <- Sys.getenv("ess_email")
ess7es <-
import_country("Spain", 7, ess_email) %>%
recode_missings()
ess7es <-
import_country("Spain", 7, ess_email) %>%
recode_missings()
# Create composite scores
ess7es <-
ess7es %>%
mutate(poltrst = trstprl + trstplt + trstprt,
serv = stfedu + stfhlth,
systmrsp = psppsgv + psppipl + ptcpplt)
selected_vars <- c("trstprl", "trstplt", "trstprt",
"stfedu", "stfhlth", "psppsgv",
"psppipl", "ptcpplt", "ppltrst",
"polintr", "stflife", "stfeco",
"agea","eisced")
composite_scores <- c("poltrst", "serv", "systmrsp")
all_vars <- c(composite_scores, selected_vars) # for using later
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
all(tolower(questions$short_name) %in% selected_vars[1:12])
sqp_data <-
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
c("hey", "ho", "hey")
unique(c("hey", "ho", "hey"))
devtools::load_all()
# To preserve consistency I place the sqp vars in front
# and grab the unique columns to delete the same variables
# that are in the middle.
cols_to_pick <- unique(
c(sqp_env$short_estimate_variables, names(raw_data))
} else  {
sqp_env$short_estimate_variables
}
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
devtools::load_all()
devtools::load_all()
make_estimate_df <- function(raw_data, var_name, id, all_columns = FALSE, authorized = TRUE) {
# If empty estimates..
if (all(c(1, 1) == dim(raw_data))) {
sqp_data <-
sqp_construct_(var_name,
metrics = list(quality = NA_integer_), # random metric
all_columns)
# only for all columns, bc otherwise
# you the 4 column layout of sqp of
# short columns is lost
if (all_columns) sqp_data$question_id <- id
return(sqp_data)
}
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", var_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
if (authorized) {
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
} else {
row_to_pick <- seq_len(nrow(raw_data))
}
if (all_columns) {
# To preserve consistency I place the sqp vars in front
# and grab the unique columns to delete the same variables
# that are in the middle.
cols_to_pick <-
unique(c(sqp_env$short_estimate_variables, names(raw_data))
} else {
cols_to_pick <- sqp_env$short_estimate_variables
}
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
devtools::load_all()
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
get_estimates(questions$id) %>%
arrange(question)
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
get_estimates(questions$id, all_columns = TRUE, authorized = FALSE) %>%
arrange(question)
devtools::load_all()
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
sqp_login()
study_id <- find_studies("ESS Round 7")$id
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
get_estimates(questions$id, all_columns = TRUE, authorized = TRUE) %>%
arrange(question)
get_estimates(questions$id, all_columns = TRUE, authorized = FALSE) %>%
arrange(question)
!authorized
authorized = TRUE
!authorized
#' get_estimates(c(1, 2, 86), all_columns = TRUE)
#'
#' # Explore variable names
#'
#' get_question_name(1)
#'
#' get_question_name(1:10)
#'
#' }
#'
get_estimates <- function(id, all_columns = FALSE, authorized = TRUE) {
stopifnot(is.numeric(id), length(id) >= 1)
if (length(id) > 100) {
stop("The SQP API only accepts 100 requests per call and `id` has length greater than 100")
}
collapsed_id <- paste0(id, collapse = ",")
url_id <- paste0(sqp_env$questions, collapsed_id, sqp_env$q_estimates)
q_name <- get_question_name(id)
raw_data <- object_request(url_id, estimates = TRUE)
list_data <- purrr::pmap(list(raw_data, q_name, id),
make_estimate_df,
all_columns = all_columns,
authorized = authorized)
if (!authorized) message("Authorized was set to FALSE, remember to pick only one single estimate for all variables")
final_df <- tibble::as_tibble(do.call(rbind, list_data))
final_df <- sqp_reconstruct(final_df)
final_df
}
get_estimates(questions$id, all_columns = TRUE, authorized = TRUE) %>%
arrange(question)
questions <-
study_id %>%
find_questions(selected_vars[1:12]) %>%
filter(country_iso == "ES", language_iso == "spa")
get_estimates(questions$id, all_columns = TRUE, authorized = FALSE) %>%
arrange(question)
#' @rdname get_estimates
#' @export
get_question_name <- function(id) {
stopifnot(is.numeric(id), length(id) >= 1)
collapsed_id <- paste0(id, collapse = ",")
almost_q_name <-
httr::content(
safe_GET(paste0(sqp_env$questions, collapsed_id)), as = "text"
)
q_name <- tolower(jsonlite::fromJSON(almost_q_name)$short_name)
q_name
}
make_estimate_df <- function(raw_data, var_name, id, all_columns = FALSE, authorized = TRUE) {
# If empty estimates..
if (all(c(1, 1) == dim(raw_data))) {
sqp_data <-
sqp_construct_(var_name,
metrics = list(quality = NA_integer_), # random metric
all_columns)
# only for all columns, bc otherwise
# you the 4 column layout of sqp of
# short columns is lost
if (all_columns) sqp_data$question_id <- id
return(sqp_data)
}
valid_rows <- !is.na(raw_data$authorized)
if (!any(valid_rows)) stop("No valid predictions for", " `", var_name,"`")
raw_data <- raw_data[valid_rows, ]
# If two authorized predictions
# are added, always returns the first one
# in order
if (authorized) {
row_to_pick <- ifelse(any(raw_data$authorized),
which(raw_data$authorized), 1)
} else {
row_to_pick <- seq_len(nrow(raw_data))
}
if (all_columns) {
# To preserve consistency I place the sqp vars in front
# and grab the unique columns to delete the same variables
# that are in the middle.
cols_to_pick <-
unique(c(sqp_env$short_estimate_variables, names(raw_data)))
} else {
cols_to_pick <- sqp_env$short_estimate_variables
}
final_df <- raw_data[row_to_pick, cols_to_pick]
final_df <- purrr::set_names(final_df, ~ gsub("prediction.", "", .x))
final_df <- tibble::add_column(final_df, question = var_name, .before = 1)
final_df
}
get_estimates(questions$id, all_columns = TRUE, authorized = FALSE) %>%
arrange(question)
sqp_data <-
get_estimates(questions$id, all_columns = TRUE) %>%
arrange(question)
sqp_data
sqp_sscore(sqp_data = sqp_data,
df = ess7es,
new_name = poltrst,
trstprl, trstplt, trstprt)
Quality <-
sqp_data %>%
sqp_sscore(df = ess7es, new_name = poltrst, trstprl, trstplt, trstprt) %>%
sqp_sscore(df = ess7es, new_name = serv, stfedu, stfhlth) %>%
sqp_sscore(df = ess7es, new_name = systmrsp, psppsgv, psppipl, ptcpplt)
Quality
Quality <-
Quality %>%
sqp_bind_metrics(agea, list(quality = 1)) %>%
sqp_bind_metrics(eisced, list(quality = 0.93))
Quality
variables_order <- c("poltrst",
"serv",
"systmrsp",
"ppltrst",
"polintr",
"stflife",
"stfeco",
"agea",
"eisced")
Quality <- Quality[match(variables_order, Quality$question), ]
ess7escorr <- ess7es %>% select(variables_order)
# Exploratory correlation matrix (in order of the columns in data frame):
original_corr_2 <- cor(ess7escorr, use = "complete.obs", method = "pearson")
original_corr_2
corr_q2 <-
sqp_correlate(x = ess7escorr,
diag_adj = Quality$quality,
use = "complete.obs",
method = "pearson")
corr_q2
#subtract the cmv from the observed correlation
corr_q2_cmv <-
sqp_cmv(x = corr_q2,
sqp_data = Quality,
stfeco, stflife)
corr_q2_cmv
cmv <-
Quality %>%
filter(question %in% c("stflife", "stfeco")) %>%
sqpr:::estimate_cmv()
corrected_corr <- corr_q2_cmv %>% select(-rowname) %>% as.matrix() %>% cov2cor()
corrected_corr
model<- "poltrst ~ ppltrst + stflife + polintr + stfeco + serv + systmrsp + agea + eisced"
# Model based on original correlation matrix
fit <-
sem(model,
sample.cov=original_corr_2,
sample.nobs= 1624)
# Model based on corrected correlation matrix
fit.corrected <-
sem(model,
sample.cov=corrected_corr,
sample.nobs= 1624)
coef_table <-
list(fit, fit.corrected) %>%
map(parameterestimates) %>%
map(~ filter(.x, lhs == "poltrst")) %>%
map(~ select(.x, rhs, est, ci.lower, ci.upper)) %>%
bind_rows() %>%
mutate(model = rep(c("original", "corrected"), each = 9))
coef_table %>%
ggplot(aes(rhs, est, colour = model)) +
geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
labs(x = "Predictors", y = "Estimated coefficients") +
theme_bw()
devtools::check()
