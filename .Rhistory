sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore),
"`df` must have at least two columns"
)
tmp <- sample_data
tmp$V5 <- as.character(tmp$V5)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = tmp,
new_name = new_sumscore,
V1, V5),
"V1, V5 must be numeric variables in `df`"
)
})
test_that("sqp_sscore checks variables are in both dfs", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, random_var),
"One or more variables are not present in `df`: random_var"
)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V6),
"One or more variables are not present in `sqp_data`: V6"
)
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_sscore(
sqp_data = tmp,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
valid_class <- sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
expect_identical(valid_class, noclass)
})
library(testthat)
context("test-sqp_sscore.R")
set.seed(231321)
library(tibble)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(5, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:5))
)
test_that("sqp_sscore returns correct output", {
result <-
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4
)
expect_s3_class(result, "data.frame")
expect_s3_class(result, "sqp")
expect_equal(nrow(result), 4)
expect_equal(nrow(result), ncol(result))
expect_is(result[[1]], "character")
# Same result:
expect_equal(round(result[4, 2, drop = TRUE], 3), 0.563)
})
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(6, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:6))
)
test_that("sqp_sscore checks for arguments", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore),
"`df` must have at least two columns"
)
tmp <- sample_data
tmp$V5 <- as.character(tmp$V5)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = tmp,
new_name = new_sumscore,
V1, V5),
"V1, V5 must be numeric variables in `df`"
)
})
test_that("sqp_sscore checks variables are in both dfs", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, random_var),
"One or more variables are not present in `df`: random_var"
)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V6),
"One or more variables are not present in `sqp_data`: V6"
)
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_sscore(
sqp_data = tmp,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
valid_class <- sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
expect_identical(valid_class, noclass)
})
library(testthat)
devtools::load_all()
context("test-sqp_sscore.R")
set.seed(231321)
library(tibble)
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(5, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:5))
)
test_that("sqp_sscore returns correct output", {
result <-
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V3, V4
)
expect_s3_class(result, "data.frame")
expect_s3_class(result, "sqp")
expect_equal(nrow(result), 4)
expect_equal(nrow(result), ncol(result))
expect_is(result[[1]], "character")
# Same result:
expect_equal(round(result[4, 2, drop = TRUE], 3), 0.563)
})
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8),
random_var = NA_real_)
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
sample_data <-
as_tibble(
setNames(
replicate(6, c(rbinom(1000, 5, 0.6), NA), simplify = FALSE),
paste0("V", 1:6))
)
test_that("sqp_sscore checks for arguments", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore),
"`df` must have at least two columns"
)
tmp <- sample_data
tmp$V5 <- as.character(tmp$V5)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = tmp,
new_name = new_sumscore,
V1, V5),
"V1, V5 must be numeric variables in `df`"
)
})
test_that("sqp_sscore checks variables are in both dfs", {
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, random_var),
"One or more variables are not present in `df`: random_var"
)
expect_error(
sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V6),
"One or more variables are not present in `sqp_data`: V6"
)
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_sscore(
sqp_data = tmp,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
valid_class <- sqp_sscore(
sqp_data = sqp_df,
df = sample_data,
new_name = new_sumscore,
V1, V2
)
expect_identical(valid_class, noclass)
})
library(testthat)
devtools::load_all()
context("test-sqp_cmv.R")
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
expect_is(cmv_tib, "data.frame")
# First column is the row names
expect_is(cmv_tib[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(cmv_tib[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", cmv_tib[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(cmv_tib), ncol(cmv_tib) - 1)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
test_that("sqp_cmv throws specific errors", {
expect_error(sqp_cmv(corr_tibble, sqp_df),
"You need to supply at least two variables to calculate the common method variance")
expect_error(sqp_cmv(corr_tibble, sqp_df, V2),
"You need to supply at least two variables to calculate the common method variance")
expect_error(sqp_cmv(corr_tibble, sqp_df, V2, V3),
"`sqp_data` must have non-missing values at variable/s: V2, V3")
expect_error(sqp_cmv(corr_tibble, sqp_df, hey, other),
"At least one variable not present in `x`: hey, other")
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_cmv(
corr_tibble,
sqp_data = tmp,
new_name = new_sumscore,
V4, V5
)
valid_class <- sqp_cmv(
corr_tibble,
sqp_data = sqp_df,
new_name = new_sumscore,
V4, V5
)
expect_identical(valid_class, noclass)
})
library(testthat)
devtools::load_all()
context("test-sqp_cmv.R")
set.seed(2131)
suppressWarnings(library(tibble))
corr_tibble <-
sqp_correlate(matrix(rnorm(100, sd = 50), nrow = 20),
rnorm(5))
# Note to Jorge: Change this to a sqp df when sqp_collect() works.
# test missing:
# When y is not from sqp_collect(), sqp_cmv must throw an error
# Show that when y is not from sqp class, there's an error
sqp_df <-
tibble(question = paste0("V", 1:5),
quality = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
sqp_df <- structure(sqp_df, class = c(class(sqp_df), "sqp"))
test_that("sqp_cmv returns correct output", {
cmv_tib <- sqp_cmv(corr_tibble, sqp_df, V4, V5)
expect_is(cmv_tib, "data.frame")
# First column is the row names
expect_is(cmv_tib[[1]], "character")
# All other columns are numeric
expect_true(all(vapply(cmv_tib[-1], is.numeric, FUN.VALUE = logical(1))))
# All row names have a at least one letter, which means
# that the row names were not extracted raw if `x`
# was a matrix
expect_true(all(grepl("[[:alpha:]]{1,}", cmv_tib[[1]])))
# df is symmetric when excluding the rowname variables
expect_equal(nrow(cmv_tib), ncol(cmv_tib) - 1)
# Also handles character strings as variables
expect_identical(cmv_tib,
sqp_cmv(corr_tibble, sqp_df, "V4", "V5"))
})
test_that("sqp_cmv throws specific errors", {
expect_error(sqp_cmv(corr_tibble, sqp_df),
"You need to supply at least two variables to calculate the common method variance")
expect_error(sqp_cmv(corr_tibble, sqp_df, V2),
"You need to supply at least two variables to calculate the common method variance")
expect_error(sqp_cmv(corr_tibble, sqp_df, V2, V3),
"`sqp_data` must have non-missing values at variable/s: V2, V3")
expect_error(sqp_cmv(corr_tibble, sqp_df, hey, other),
"At least one variable not present in `x`: hey, other")
})
test_that("sqp_sscore adds sqp class to valid sqp_data", {
tmp <- sqp_df
class(tmp) <- c("tbl_df", "tbl", "data.frame")
noclass <- sqp_cmv(
corr_tibble,
sqp_data = tmp,
V4, V5
)
valid_class <- sqp_cmv(
corr_tibble,
sqp_data = sqp_df,
V4, V5
)
expect_identical(valid_class, noclass)
})
58 + 25
sqp_reconstruct()
sqp_reconstruct
check_sqp_data
sqp_df <-
tibble(question = paste0("V", 1:5),
not_indf = c(0.2, 0.3, 0.5, 0.6, 0.9),
reliability = c(NA, 0.4, 0.5, 0.5, 0.7),
validity = c(NA, NA, 0.6, 0.7, 0.8))
expect_error(
sqp_reconstruct(sqp_df),
"Variables quality, reliability, validity must be available in `sqp_data`"
)
sqp_df <-
tibble(question = paste0("V", 1:5),
not_indf = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
sqp_df <-
tibble(question = paste0("V", 1:3),
not_indf = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
expect_error(
sqp_reconstruct(sqp_df),
"Variables quality, reliability, validity must be available in `sqp_data`"
)
sqp_df <-
tibble(question = paste0("V", 1:3),
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 1.2))
sqp_reconstruct(sqp_df)
expect_error(
sqp_reconstruct(sqp_df),
"quality, reliability, validity must be numeric columns with values between/including 0 and 1 in `sqp_data`"
)
sqp_reconstruct
check_sqp_data
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 1.2))
expect_error(
sqp_reconstruct(sqp_df),
"quality, reliability, validity must be numeric columns with values between/including 0 and 1 in `sqp_data`"
)
expect_error(
sqp_reconstruct(sqp_df),
"First column in `sqp_data` must contain the question names as strings"
)
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.2))
expect_error(
sqp_reconstruct(sqp_df),
"First column in `sqp_data` must contain the question names as strings"
)
context("test-sqp_reconstruct.R")
test_that("sqp_reconstruct checks data format", {
sqp_df <-
tibble(question = paste0("V", 1:3),
not_indf = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
expect_error(
sqp_reconstruct(sqp_df),
"Variables quality, reliability, validity must be available in `sqp_data`"
)
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 1.2))
expect_error(
sqp_reconstruct(sqp_df),
"quality, reliability, validity must be numeric columns with values between/including 0 and 1 in `sqp_data`"
)
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.2))
expect_error(
sqp_reconstruct(sqp_df),
"First column in `sqp_data` must contain the question names as strings"
)
})
expect_s3_class(sqp_reconstruct(sqp_df, "sqp"))
expect_s3_class(sqp_reconstruct(sqp_df), "sqp")
sqp_df
sqp_df <-
tibble(question = paste0("V", 1:3),
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
expect_s3_class(sqp_reconstruct(sqp_df), "sqp")
context("test-sqp_reconstruct.R")
test_that("sqp_reconstruct checks data format", {
sqp_df <-
tibble(question = paste0("V", 1:3),
not_indf = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
expect_error(
sqp_reconstruct(sqp_df),
"Variables quality, reliability, validity must be available in `sqp_data`"
)
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 1.2))
expect_error(
sqp_reconstruct(sqp_df),
"quality, reliability, validity must be numeric columns with values between/including 0 and 1 in `sqp_data`"
)
sqp_df <-
tibble(question = 1:3,
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.2))
expect_error(
sqp_reconstruct(sqp_df),
"First column in `sqp_data` must contain the question names as strings"
)
})
test_that("sqp_reconstruct assigns sqp class if everything is fine", {
sqp_df <-
tibble(question = paste0("V", 1:3),
quality = c(0.2, 0.3, 0.5),
reliability = c(NA, 0.4, 0.5),
validity = c(NA, NA, 0.6))
expect_s3_class(sqp_reconstruct(sqp_df), "sqp")
})
devtools::test()
devtools::check()
